#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.1.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_sub_port_events_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "sub_port_events",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(sub_port_events(task_callback.stream_sink::<_, PortEvent>()))
            }
        },
    )
}
fn wire_sub_device_events_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "sub_device_events",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(sub_device_events(
                    task_callback.stream_sink::<_, Vec<DeviceChange>>(),
                ))
            }
        },
    )
}
fn wire_new_ffi_coordinator_impl(
    port_: MessagePort,
    host_handles_serial: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, RustOpaque<FfiCoordinator>, _>(
        WrapInfo {
            debug_name: "new_ffi_coordinator",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_host_handles_serial = host_handles_serial.wire2api();
            move |task_callback| Result::<_, ()>::Ok(new_ffi_coordinator(api_host_handles_serial))
        },
    )
}
fn wire_turn_stderr_logging_on_impl(port_: MessagePort, level: impl Wire2Api<Level> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "turn_stderr_logging_on",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_level = level.wire2api();
            move |task_callback| Result::<_, ()>::Ok(turn_stderr_logging_on(api_level))
        },
    )
}
fn wire_turn_logcat_logging_on_impl(port_: MessagePort, _level: impl Wire2Api<Level> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "turn_logcat_logging_on",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api__level = _level.wire2api();
            move |task_callback| Result::<_, ()>::Ok(turn_logcat_logging_on(api__level))
        },
    )
}
fn wire_announce_available_ports_impl(
    port_: MessagePort,
    coordinator: impl Wire2Api<RustOpaque<FfiCoordinator>> + UnwindSafe,
    ports: impl Wire2Api<Vec<PortDesc>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "announce_available_ports",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_coordinator = coordinator.wire2api();
            let api_ports = ports.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(announce_available_ports(api_coordinator, api_ports))
            }
        },
    )
}
fn wire_set_device_label_impl(
    port_: MessagePort,
    coordinator: impl Wire2Api<RustOpaque<FfiCoordinator>> + UnwindSafe,
    device_id: impl Wire2Api<String> + UnwindSafe,
    label: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "set_device_label",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_coordinator = coordinator.wire2api();
            let api_device_id = device_id.wire2api();
            let api_label = label.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(set_device_label(api_coordinator, api_device_id, api_label))
            }
        },
    )
}
fn wire_satisfy__method__PortOpen_impl(
    port_: MessagePort,
    that: impl Wire2Api<PortOpen> + UnwindSafe,
    err: impl Wire2Api<Option<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "satisfy__method__PortOpen",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_err = err.wire2api();
            move |task_callback| Result::<_, ()>::Ok(PortOpen::satisfy(&api_that, api_err))
        },
    )
}
fn wire_satisfy__method__PortRead_impl(
    port_: MessagePort,
    that: impl Wire2Api<PortRead> + UnwindSafe,
    bytes: impl Wire2Api<Vec<u8>> + UnwindSafe,
    err: impl Wire2Api<Option<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "satisfy__method__PortRead",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_bytes = bytes.wire2api();
            let api_err = err.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(PortRead::satisfy(&api_that, api_bytes, api_err))
            }
        },
    )
}
fn wire_satisfy__method__PortWrite_impl(
    port_: MessagePort,
    that: impl Wire2Api<PortWrite> + UnwindSafe,
    err: impl Wire2Api<Option<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "satisfy__method__PortWrite",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_err = err.wire2api();
            move |task_callback| Result::<_, ()>::Ok(PortWrite::satisfy(&api_that, api_err))
        },
    )
}
fn wire_satisfy__method__PortBytesToRead_impl(
    port_: MessagePort,
    that: impl Wire2Api<PortBytesToRead> + UnwindSafe,
    bytes_to_read: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "satisfy__method__PortBytesToRead",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_bytes_to_read = bytes_to_read.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(PortBytesToRead::satisfy(&api_that, api_bytes_to_read))
            }
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<Level> for i32 {
    fn wire2api(self) -> Level {
        match self {
            0 => Level::Debug,
            1 => Level::Info,
            _ => unreachable!("Invalid variant for Level: {}", self),
        }
    }
}

impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}
impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<usize> for usize {
    fn wire2api(self) -> usize {
        self
    }
}
// Section: impl IntoDart

impl support::IntoDart for DeviceChange {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Added { id } => vec![0.into_dart(), id.into_into_dart().into_dart()],
            Self::Registered { id, label } => vec![
                1.into_dart(),
                id.into_into_dart().into_dart(),
                label.into_into_dart().into_dart(),
            ],
            Self::Disconnected { id } => vec![2.into_dart(), id.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DeviceChange {}
impl rust2dart::IntoIntoDart<DeviceChange> for DeviceChange {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for PortBytesToRead {
    fn into_dart(self) -> support::DartAbi {
        vec![self.id.into_into_dart().into_dart(), self.ready.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PortBytesToRead {}
impl rust2dart::IntoIntoDart<PortBytesToRead> for PortBytesToRead {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for PortEvent {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Open { request } => vec![0.into_dart(), request.into_into_dart().into_dart()],
            Self::Write { request } => vec![1.into_dart(), request.into_into_dart().into_dart()],
            Self::Read { request } => vec![2.into_dart(), request.into_into_dart().into_dart()],
            Self::BytesToRead { request } => {
                vec![3.into_dart(), request.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PortEvent {}
impl rust2dart::IntoIntoDart<PortEvent> for PortEvent {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for PortOpen {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.baud_rate.into_into_dart().into_dart(),
            self.ready.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PortOpen {}
impl rust2dart::IntoIntoDart<PortOpen> for PortOpen {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for PortRead {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.len.into_into_dart().into_dart(),
            self.ready.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PortRead {}
impl rust2dart::IntoIntoDart<PortRead> for PortRead {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for PortWrite {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.bytes.into_into_dart().into_dart(),
            self.ready.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PortWrite {}
impl rust2dart::IntoIntoDart<PortWrite> for PortWrite {
    fn into_into_dart(self) -> Self {
        self
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "bridge_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
