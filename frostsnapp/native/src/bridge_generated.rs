#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::camera::DecodingProgress;
use crate::camera::QrDecoderStatus;

// Section: wire functions

fn wire_sub_port_events_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "sub_port_events",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(sub_port_events(task_callback.stream_sink::<_, PortEvent>()))
            }
        },
    )
}
fn wire_sub_device_events_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "sub_device_events",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(sub_device_events(
                    task_callback.stream_sink::<_, DeviceListUpdate>(),
                ))
            }
        },
    )
}
fn wire_turn_stderr_logging_on_impl(
    port_: MessagePort,
    level: impl Wire2Api<LogLevel> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "turn_stderr_logging_on",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_level = level.wire2api();
            move |task_callback| Result::<_, ()>::Ok(turn_stderr_logging_on(api_level))
        },
    )
}
fn wire_turn_logcat_logging_on_impl(
    port_: MessagePort,
    _level: impl Wire2Api<LogLevel> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "turn_logcat_logging_on",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api__level = _level.wire2api();
            move |task_callback| Result::<_, ()>::Ok(turn_logcat_logging_on(api__level))
        },
    )
}
fn wire_device_at_index_impl(index: impl Wire2Api<usize> + UnwindSafe) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "device_at_index",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_index = index.wire2api();
            Result::<_, ()>::Ok(device_at_index(api_index))
        },
    )
}
fn wire_device_list_state_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "device_list_state",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Result::<_, ()>::Ok(device_list_state()),
    )
}
fn wire_get_device_impl(id: impl Wire2Api<DeviceId> + UnwindSafe) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get_device",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_id = id.wire2api();
            Result::<_, ()>::Ok(get_device(api_id))
        },
    )
}
fn wire_load_impl(port_: MessagePort, db_file: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (Coordinator, Wallet, BitcoinContext), _>(
        WrapInfo {
            debug_name: "load",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_db_file = db_file.wire2api();
            move |task_callback| load(api_db_file)
        },
    )
}
fn wire_load_host_handles_serial_impl(
    port_: MessagePort,
    db_file: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER
        .wrap::<_, _, _, (Coordinator, FfiSerial, Wallet, BitcoinContext), _>(
            WrapInfo {
                debug_name: "load_host_handles_serial",
                port: Some(port_),
                mode: FfiCallMode::Normal,
            },
            move || {
                let api_db_file = db_file.wire2api();
                move |task_callback| load_host_handles_serial(api_db_file)
            },
        )
}
fn wire_echo_key_id_impl(port_: MessagePort, key_id: impl Wire2Api<KeyId> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, mirror_KeyId, _>(
        WrapInfo {
            debug_name: "echo_key_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_key_id = key_id.wire2api();
            move |task_callback| Result::<_, ()>::Ok(echo_key_id(api_key_id))
        },
    )
}
fn wire_psbt_bytes_to_psbt_impl(
    psbt_bytes: impl Wire2Api<Vec<u8>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "psbt_bytes_to_psbt",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_psbt_bytes = psbt_bytes.wire2api();
            psbt_bytes_to_psbt(api_psbt_bytes)
        },
    )
}
fn wire_new_qr_reader_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, QrReader, _>(
        WrapInfo {
            debug_name: "new_qr_reader",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(new_qr_reader()),
    )
}
fn wire_txid__method__Transaction_impl(
    that: impl Wire2Api<Transaction> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "txid__method__Transaction",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            Result::<_, ()>::Ok(Transaction::txid(&api_that))
        },
    )
}
fn wire_ready__method__Device_impl(
    that: impl Wire2Api<Device> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "ready__method__Device",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            Result::<_, ()>::Ok(Device::ready(&api_that))
        },
    )
}
fn wire_needs_firmware_upgrade__method__Device_impl(
    that: impl Wire2Api<Device> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "needs_firmware_upgrade__method__Device",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            Result::<_, ()>::Ok(Device::needs_firmware_upgrade(&api_that))
        },
    )
}
fn wire_threshold__method__FrostKey_impl(
    that: impl Wire2Api<FrostKey> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "threshold__method__FrostKey",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            Result::<_, ()>::Ok(FrostKey::threshold(&api_that))
        },
    )
}
fn wire_id__method__FrostKey_impl(
    that: impl Wire2Api<FrostKey> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "id__method__FrostKey",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            Result::<_, ()>::Ok(FrostKey::id(&api_that))
        },
    )
}
fn wire_name__method__FrostKey_impl(
    that: impl Wire2Api<FrostKey> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "name__method__FrostKey",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            Result::<_, ()>::Ok(FrostKey::name(&api_that))
        },
    )
}
fn wire_devices__method__FrostKey_impl(
    that: impl Wire2Api<FrostKey> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "devices__method__FrostKey",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            Result::<_, ()>::Ok(FrostKey::devices(&api_that))
        },
    )
}
fn wire_satisfy__method__PortOpen_impl(
    port_: MessagePort,
    that: impl Wire2Api<PortOpen> + UnwindSafe,
    err: impl Wire2Api<Option<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "satisfy__method__PortOpen",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_err = err.wire2api();
            move |task_callback| Result::<_, ()>::Ok(PortOpen::satisfy(&api_that, api_err))
        },
    )
}
fn wire_satisfy__method__PortRead_impl(
    port_: MessagePort,
    that: impl Wire2Api<PortRead> + UnwindSafe,
    bytes: impl Wire2Api<Vec<u8>> + UnwindSafe,
    err: impl Wire2Api<Option<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "satisfy__method__PortRead",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_bytes = bytes.wire2api();
            let api_err = err.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(PortRead::satisfy(&api_that, api_bytes, api_err))
            }
        },
    )
}
fn wire_satisfy__method__PortWrite_impl(
    port_: MessagePort,
    that: impl Wire2Api<PortWrite> + UnwindSafe,
    err: impl Wire2Api<Option<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "satisfy__method__PortWrite",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_err = err.wire2api();
            move |task_callback| Result::<_, ()>::Ok(PortWrite::satisfy(&api_that, api_err))
        },
    )
}
fn wire_satisfy__method__PortBytesToRead_impl(
    port_: MessagePort,
    that: impl Wire2Api<PortBytesToRead> + UnwindSafe,
    bytes_to_read: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "satisfy__method__PortBytesToRead",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_bytes_to_read = bytes_to_read.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(PortBytesToRead::satisfy(&api_that, api_bytes_to_read))
            }
        },
    )
}
fn wire_get_device__method__DeviceListState_impl(
    that: impl Wire2Api<DeviceListState> + UnwindSafe,
    id: impl Wire2Api<DeviceId> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get_device__method__DeviceListState",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_id = id.wire2api();
            Result::<_, ()>::Ok(DeviceListState::get_device(&api_that, api_id))
        },
    )
}
fn wire_sub_tx_state__method__Wallet_impl(
    port_: MessagePort,
    that: impl Wire2Api<Wallet> + UnwindSafe,
    key_id: impl Wire2Api<KeyId> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "sub_tx_state__method__Wallet",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_that = that.wire2api();
            let api_key_id = key_id.wire2api();
            move |task_callback| {
                Wallet::sub_tx_state(
                    &api_that,
                    api_key_id,
                    task_callback.stream_sink::<_, TxState>(),
                )
            }
        },
    )
}
fn wire_tx_state__method__Wallet_impl(
    that: impl Wire2Api<Wallet> + UnwindSafe,
    key_id: impl Wire2Api<KeyId> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "tx_state__method__Wallet",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_key_id = key_id.wire2api();
            Result::<_, ()>::Ok(Wallet::tx_state(&api_that, api_key_id))
        },
    )
}
fn wire_sync_txids__method__Wallet_impl(
    port_: MessagePort,
    that: impl Wire2Api<Wallet> + UnwindSafe,
    key_id: impl Wire2Api<KeyId> + UnwindSafe,
    txids: impl Wire2Api<Vec<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "sync_txids__method__Wallet",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_that = that.wire2api();
            let api_key_id = key_id.wire2api();
            let api_txids = txids.wire2api();
            move |task_callback| {
                Wallet::sync_txids(
                    &api_that,
                    api_key_id,
                    api_txids,
                    task_callback.stream_sink::<_, f64>(),
                )
            }
        },
    )
}
fn wire_sync__method__Wallet_impl(
    port_: MessagePort,
    that: impl Wire2Api<Wallet> + UnwindSafe,
    key_id: impl Wire2Api<KeyId> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "sync__method__Wallet",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_that = that.wire2api();
            let api_key_id = key_id.wire2api();
            move |task_callback| {
                Wallet::sync(&api_that, api_key_id, task_callback.stream_sink::<_, f64>())
            }
        },
    )
}
fn wire_next_address__method__Wallet_impl(
    port_: MessagePort,
    that: impl Wire2Api<Wallet> + UnwindSafe,
    key_id: impl Wire2Api<KeyId> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Address, _>(
        WrapInfo {
            debug_name: "next_address__method__Wallet",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_key_id = key_id.wire2api();
            move |task_callback| Wallet::next_address(&api_that, api_key_id)
        },
    )
}
fn wire_addresses_state__method__Wallet_impl(
    that: impl Wire2Api<Wallet> + UnwindSafe,
    key_id: impl Wire2Api<KeyId> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "addresses_state__method__Wallet",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_key_id = key_id.wire2api();
            Result::<_, ()>::Ok(Wallet::addresses_state(&api_that, api_key_id))
        },
    )
}
fn wire_send_to__method__Wallet_impl(
    port_: MessagePort,
    that: impl Wire2Api<Wallet> + UnwindSafe,
    key_id: impl Wire2Api<KeyId> + UnwindSafe,
    to_address: impl Wire2Api<String> + UnwindSafe,
    value: impl Wire2Api<u64> + UnwindSafe,
    feerate: impl Wire2Api<f64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, UnsignedTx, _>(
        WrapInfo {
            debug_name: "send_to__method__Wallet",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_key_id = key_id.wire2api();
            let api_to_address = to_address.wire2api();
            let api_value = value.wire2api();
            let api_feerate = feerate.wire2api();
            move |task_callback| {
                Wallet::send_to(
                    &api_that,
                    api_key_id,
                    api_to_address,
                    api_value,
                    api_feerate,
                )
            }
        },
    )
}
fn wire_broadcast_tx__method__Wallet_impl(
    port_: MessagePort,
    that: impl Wire2Api<Wallet> + UnwindSafe,
    key_id: impl Wire2Api<KeyId> + UnwindSafe,
    tx: impl Wire2Api<SignedTx> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "broadcast_tx__method__Wallet",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_key_id = key_id.wire2api();
            let api_tx = tx.wire2api();
            move |task_callback| Wallet::broadcast_tx(&api_that, api_key_id, api_tx)
        },
    )
}
fn wire_psbt_to_unsigned_tx__method__Wallet_impl(
    that: impl Wire2Api<Wallet> + UnwindSafe,
    psbt: impl Wire2Api<Psbt> + UnwindSafe,
    key_id: impl Wire2Api<KeyId> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "psbt_to_unsigned_tx__method__Wallet",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_psbt = psbt.wire2api();
            let api_key_id = key_id.wire2api();
            Wallet::psbt_to_unsigned_tx(&api_that, api_psbt, api_key_id)
        },
    )
}
fn wire_set_available_ports__method__FfiSerial_impl(
    port_: MessagePort,
    that: impl Wire2Api<FfiSerial> + UnwindSafe,
    ports: impl Wire2Api<Vec<PortDesc>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "set_available_ports__method__FfiSerial",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_ports = ports.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(FfiSerial::set_available_ports(&api_that, api_ports))
            }
        },
    )
}
fn wire_start_thread__method__Coordinator_impl(
    port_: MessagePort,
    that: impl Wire2Api<Coordinator> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "start_thread__method__Coordinator",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Coordinator::start_thread(&api_that)
        },
    )
}
fn wire_update_name_preview__method__Coordinator_impl(
    port_: MessagePort,
    that: impl Wire2Api<Coordinator> + UnwindSafe,
    id: impl Wire2Api<DeviceId> + UnwindSafe,
    name: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "update_name_preview__method__Coordinator",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_id = id.wire2api();
            let api_name = name.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(Coordinator::update_name_preview(
                    &api_that, api_id, api_name,
                ))
            }
        },
    )
}
fn wire_finish_naming__method__Coordinator_impl(
    port_: MessagePort,
    that: impl Wire2Api<Coordinator> + UnwindSafe,
    id: impl Wire2Api<DeviceId> + UnwindSafe,
    name: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "finish_naming__method__Coordinator",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_id = id.wire2api();
            let api_name = name.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(Coordinator::finish_naming(&api_that, api_id, api_name))
            }
        },
    )
}
fn wire_send_cancel__method__Coordinator_impl(
    port_: MessagePort,
    that: impl Wire2Api<Coordinator> + UnwindSafe,
    id: impl Wire2Api<DeviceId> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "send_cancel__method__Coordinator",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_id = id.wire2api();
            move |task_callback| Result::<_, ()>::Ok(Coordinator::send_cancel(&api_that, api_id))
        },
    )
}
fn wire_cancel_all__method__Coordinator_impl(
    port_: MessagePort,
    that: impl Wire2Api<Coordinator> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "cancel_all__method__Coordinator",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Result::<_, ()>::Ok(Coordinator::cancel_all(&api_that))
        },
    )
}
fn wire_display_backup__method__Coordinator_impl(
    port_: MessagePort,
    that: impl Wire2Api<Coordinator> + UnwindSafe,
    id: impl Wire2Api<DeviceId> + UnwindSafe,
    key_id: impl Wire2Api<KeyId> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "display_backup__method__Coordinator",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_that = that.wire2api();
            let api_id = id.wire2api();
            let api_key_id = key_id.wire2api();
            move |task_callback| {
                Coordinator::display_backup(
                    &api_that,
                    api_id,
                    api_key_id,
                    task_callback.stream_sink::<_, ()>(),
                )
            }
        },
    )
}
fn wire_key_state__method__Coordinator_impl(
    that: impl Wire2Api<Coordinator> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "key_state__method__Coordinator",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            Result::<_, ()>::Ok(Coordinator::key_state(&api_that))
        },
    )
}
fn wire_sub_key_events__method__Coordinator_impl(
    port_: MessagePort,
    that: impl Wire2Api<Coordinator> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "sub_key_events__method__Coordinator",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| {
                Coordinator::sub_key_events(&api_that, task_callback.stream_sink::<_, KeyState>())
            }
        },
    )
}
fn wire_get_key__method__Coordinator_impl(
    that: impl Wire2Api<Coordinator> + UnwindSafe,
    key_id: impl Wire2Api<KeyId> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get_key__method__Coordinator",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_key_id = key_id.wire2api();
            Result::<_, ()>::Ok(Coordinator::get_key(&api_that, api_key_id))
        },
    )
}
fn wire_keys_for_device__method__Coordinator_impl(
    that: impl Wire2Api<Coordinator> + UnwindSafe,
    device_id: impl Wire2Api<DeviceId> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "keys_for_device__method__Coordinator",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_device_id = device_id.wire2api();
            Result::<_, ()>::Ok(Coordinator::keys_for_device(&api_that, api_device_id))
        },
    )
}
fn wire_start_signing__method__Coordinator_impl(
    port_: MessagePort,
    that: impl Wire2Api<Coordinator> + UnwindSafe,
    key_id: impl Wire2Api<KeyId> + UnwindSafe,
    devices: impl Wire2Api<Vec<DeviceId>> + UnwindSafe,
    message: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "start_signing__method__Coordinator",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_that = that.wire2api();
            let api_key_id = key_id.wire2api();
            let api_devices = devices.wire2api();
            let api_message = message.wire2api();
            move |task_callback| {
                Coordinator::start_signing(
                    &api_that,
                    api_key_id,
                    api_devices,
                    api_message,
                    task_callback.stream_sink::<_, mirror_SigningState>(),
                )
            }
        },
    )
}
fn wire_start_signing_tx__method__Coordinator_impl(
    port_: MessagePort,
    that: impl Wire2Api<Coordinator> + UnwindSafe,
    key_id: impl Wire2Api<KeyId> + UnwindSafe,
    unsigned_tx: impl Wire2Api<UnsignedTx> + UnwindSafe,
    devices: impl Wire2Api<Vec<DeviceId>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "start_signing_tx__method__Coordinator",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_that = that.wire2api();
            let api_key_id = key_id.wire2api();
            let api_unsigned_tx = unsigned_tx.wire2api();
            let api_devices = devices.wire2api();
            move |task_callback| {
                Coordinator::start_signing_tx(
                    &api_that,
                    api_key_id,
                    api_unsigned_tx,
                    api_devices,
                    task_callback.stream_sink::<_, mirror_SigningState>(),
                )
            }
        },
    )
}
fn wire_nonces_available__method__Coordinator_impl(
    that: impl Wire2Api<Coordinator> + UnwindSafe,
    id: impl Wire2Api<DeviceId> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "nonces_available__method__Coordinator",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_id = id.wire2api();
            Result::<_, ()>::Ok(Coordinator::nonces_available(&api_that, api_id))
        },
    )
}
fn wire_generate_new_key__method__Coordinator_impl(
    port_: MessagePort,
    that: impl Wire2Api<Coordinator> + UnwindSafe,
    threshold: impl Wire2Api<usize> + UnwindSafe,
    devices: impl Wire2Api<Vec<DeviceId>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "generate_new_key__method__Coordinator",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_that = that.wire2api();
            let api_threshold = threshold.wire2api();
            let api_devices = devices.wire2api();
            move |task_callback| {
                Coordinator::generate_new_key(
                    &api_that,
                    api_threshold,
                    api_devices,
                    task_callback.stream_sink::<_, mirror_KeyGenState>(),
                )
            }
        },
    )
}
fn wire_persisted_sign_session_description__method__Coordinator_impl(
    that: impl Wire2Api<Coordinator> + UnwindSafe,
    key_id: impl Wire2Api<KeyId> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "persisted_sign_session_description__method__Coordinator",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_key_id = key_id.wire2api();
            Coordinator::persisted_sign_session_description(&api_that, api_key_id)
        },
    )
}
fn wire_try_restore_signing_session__method__Coordinator_impl(
    port_: MessagePort,
    that: impl Wire2Api<Coordinator> + UnwindSafe,
    key_id: impl Wire2Api<KeyId> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "try_restore_signing_session__method__Coordinator",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_that = that.wire2api();
            let api_key_id = key_id.wire2api();
            move |task_callback| {
                Coordinator::try_restore_signing_session(
                    &api_that,
                    api_key_id,
                    task_callback.stream_sink::<_, mirror_SigningState>(),
                )
            }
        },
    )
}
fn wire_start_firmware_upgrade__method__Coordinator_impl(
    port_: MessagePort,
    that: impl Wire2Api<Coordinator> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "start_firmware_upgrade__method__Coordinator",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| {
                Coordinator::start_firmware_upgrade(
                    &api_that,
                    task_callback.stream_sink::<_, mirror_FirmwareUpgradeConfirmState>(),
                )
            }
        },
    )
}
fn wire_upgrade_firmware_digest__method__Coordinator_impl(
    that: impl Wire2Api<Coordinator> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "upgrade_firmware_digest__method__Coordinator",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            Result::<_, ()>::Ok(Coordinator::upgrade_firmware_digest(&api_that))
        },
    )
}
fn wire_cancel_protocol__method__Coordinator_impl(
    port_: MessagePort,
    that: impl Wire2Api<Coordinator> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "cancel_protocol__method__Coordinator",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Result::<_, ()>::Ok(Coordinator::cancel_protocol(&api_that))
        },
    )
}
fn wire_enter_firmware_upgrade_mode__method__Coordinator_impl(
    port_: MessagePort,
    that: impl Wire2Api<Coordinator> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "enter_firmware_upgrade_mode__method__Coordinator",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| {
                Coordinator::enter_firmware_upgrade_mode(
                    &api_that,
                    task_callback.stream_sink::<_, f32>(),
                )
            }
        },
    )
}
fn wire_descriptor_for_key__method__BitcoinContext_impl(
    that: impl Wire2Api<BitcoinContext> + UnwindSafe,
    key_id: impl Wire2Api<KeyId> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "descriptor_for_key__method__BitcoinContext",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_key_id = key_id.wire2api();
            Result::<_, ()>::Ok(BitcoinContext::descriptor_for_key(&api_that, api_key_id))
        },
    )
}
fn wire_validate_amount__method__BitcoinContext_impl(
    that: impl Wire2Api<BitcoinContext> + UnwindSafe,
    address: impl Wire2Api<String> + UnwindSafe,
    value: impl Wire2Api<u64> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "validate_amount__method__BitcoinContext",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_address = address.wire2api();
            let api_value = value.wire2api();
            Result::<_, ()>::Ok(BitcoinContext::validate_amount(
                &api_that,
                api_address,
                api_value,
            ))
        },
    )
}
fn wire_validate_destination_address__method__BitcoinContext_impl(
    that: impl Wire2Api<BitcoinContext> + UnwindSafe,
    address: impl Wire2Api<String> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "validate_destination_address__method__BitcoinContext",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_address = address.wire2api();
            Result::<_, ()>::Ok(BitcoinContext::validate_destination_address(
                &api_that,
                api_address,
            ))
        },
    )
}
fn wire_effect__method__SignedTx_impl(
    that: impl Wire2Api<SignedTx> + UnwindSafe,
    key_id: impl Wire2Api<KeyId> + UnwindSafe,
    network: impl Wire2Api<RustOpaque<bitcoin::Network>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "effect__method__SignedTx",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_key_id = key_id.wire2api();
            let api_network = network.wire2api();
            SignedTx::effect(&api_that, api_key_id, api_network)
        },
    )
}
fn wire_attach_signatures_to_psbt__method__UnsignedTx_impl(
    port_: MessagePort,
    that: impl Wire2Api<UnsignedTx> + UnwindSafe,
    signatures: impl Wire2Api<Vec<EncodedSignature>> + UnwindSafe,
    psbt: impl Wire2Api<Psbt> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Psbt, _>(
        WrapInfo {
            debug_name: "attach_signatures_to_psbt__method__UnsignedTx",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_signatures = signatures.wire2api();
            let api_psbt = psbt.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(UnsignedTx::attach_signatures_to_psbt(
                    &api_that,
                    api_signatures,
                    api_psbt,
                ))
            }
        },
    )
}
fn wire_complete__method__UnsignedTx_impl(
    port_: MessagePort,
    that: impl Wire2Api<UnsignedTx> + UnwindSafe,
    signatures: impl Wire2Api<Vec<EncodedSignature>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, SignedTx, _>(
        WrapInfo {
            debug_name: "complete__method__UnsignedTx",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_signatures = signatures.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(UnsignedTx::complete(&api_that, api_signatures))
            }
        },
    )
}
fn wire_effect__method__UnsignedTx_impl(
    that: impl Wire2Api<UnsignedTx> + UnwindSafe,
    key_id: impl Wire2Api<KeyId> + UnwindSafe,
    network: impl Wire2Api<RustOpaque<bitcoin::Network>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "effect__method__UnsignedTx",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_key_id = key_id.wire2api();
            let api_network = network.wire2api();
            UnsignedTx::effect(&api_that, api_key_id, api_network)
        },
    )
}
fn wire_to_bytes__method__Psbt_impl(
    that: impl Wire2Api<Psbt> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "to_bytes__method__Psbt",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            Psbt::to_bytes(&api_that)
        },
    )
}
fn wire_decode_from_bytes__method__QrReader_impl(
    port_: MessagePort,
    that: impl Wire2Api<QrReader> + UnwindSafe,
    bytes: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, QrDecoderStatus, _>(
        WrapInfo {
            debug_name: "decode_from_bytes__method__QrReader",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_bytes = bytes.wire2api();
            move |task_callback| QrReader::decode_from_bytes(&api_that, api_bytes)
        },
    )
}
// Section: wrapper structs

#[derive(Clone)]
pub struct mirror_ConfirmationTime(ConfirmationTime);

#[derive(Clone)]
pub struct mirror_DeviceId(DeviceId);

#[derive(Clone)]
pub struct mirror_EncodedSignature(EncodedSignature);

#[derive(Clone)]
pub struct mirror_FirmwareUpgradeConfirmState(FirmwareUpgradeConfirmState);

#[derive(Clone)]
pub struct mirror_KeyGenState(KeyGenState);

#[derive(Clone)]
pub struct mirror_KeyId(KeyId);

#[derive(Clone)]
pub struct mirror_SigningState(SigningState);

// Section: static checks

const _: fn() = || {
    {
        let ConfirmationTime = None::<ConfirmationTime>.unwrap();
        let _: u32 = ConfirmationTime.height;
        let _: u64 = ConfirmationTime.time;
    }
    {
        let DeviceId_ = None::<DeviceId>.unwrap();
        let _: [u8; 33] = DeviceId_.0;
    }
    {
        let EncodedSignature_ = None::<EncodedSignature>.unwrap();
        let _: [u8; 64] = EncodedSignature_.0;
    }
    {
        let FirmwareUpgradeConfirmState = None::<FirmwareUpgradeConfirmState>.unwrap();
        let _: Vec<DeviceId> = FirmwareUpgradeConfirmState.confirmations;
        let _: Vec<DeviceId> = FirmwareUpgradeConfirmState.devices;
        let _: Vec<DeviceId> = FirmwareUpgradeConfirmState.need_upgrade;
        let _: bool = FirmwareUpgradeConfirmState.abort;
        let _: bool = FirmwareUpgradeConfirmState.upgrade_ready_to_start;
    }
    {
        let KeyGenState = None::<KeyGenState>.unwrap();
        let _: Vec<DeviceId> = KeyGenState.devices;
        let _: Vec<DeviceId> = KeyGenState.got_shares;
        let _: Vec<DeviceId> = KeyGenState.session_acks;
        let _: Option<[u8; 32]> = KeyGenState.session_hash;
        let _: Option<KeyId> = KeyGenState.finished;
        let _: Option<String> = KeyGenState.aborted;
        let _: usize = KeyGenState.threshold;
    }
    {
        let KeyId_ = None::<KeyId>.unwrap();
        let _: [u8; 33] = KeyId_.0;
    }
    {
        let SigningState = None::<SigningState>.unwrap();
        let _: Vec<DeviceId> = SigningState.got_shares;
        let _: Vec<DeviceId> = SigningState.needed_from;
        let _: Vec<EncodedSignature> = SigningState.finished_signatures;
    }
};
// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}

impl Wire2Api<LogLevel> for i32 {
    fn wire2api(self) -> LogLevel {
        match self {
            0 => LogLevel::Debug,
            1 => LogLevel::Info,
            _ => unreachable!("Invalid variant for LogLevel: {}", self),
        }
    }
}

impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}
impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<usize> for usize {
    fn wire2api(self) -> usize {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for Address {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.index.into_into_dart().into_dart(),
            self.address_string.into_into_dart().into_dart(),
            self.used.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Address {}
impl rust2dart::IntoIntoDart<Address> for Address {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for BitcoinContext {
    fn into_dart(self) -> support::DartAbi {
        vec![self.network.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for BitcoinContext {}
impl rust2dart::IntoIntoDart<BitcoinContext> for BitcoinContext {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for mirror_ConfirmationTime {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.height.into_into_dart().into_dart(),
            self.0.time.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_ConfirmationTime {}
impl rust2dart::IntoIntoDart<mirror_ConfirmationTime> for ConfirmationTime {
    fn into_into_dart(self) -> mirror_ConfirmationTime {
        mirror_ConfirmationTime(self)
    }
}

impl support::IntoDart for Coordinator {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Coordinator {}
impl rust2dart::IntoIntoDart<Coordinator> for Coordinator {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for DecodingProgress {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.decoded_frames.into_into_dart().into_dart(),
            self.sequence_count.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DecodingProgress {}
impl rust2dart::IntoIntoDart<DecodingProgress> for DecodingProgress {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for Device {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.name.into_dart(),
            self.firmware_digest.into_into_dart().into_dart(),
            self.latest_digest.into_into_dart().into_dart(),
            self.id.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Device {}
impl rust2dart::IntoIntoDart<Device> for Device {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for mirror_DeviceId {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0 .0.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_DeviceId {}
impl rust2dart::IntoIntoDart<mirror_DeviceId> for DeviceId {
    fn into_into_dart(self) -> mirror_DeviceId {
        mirror_DeviceId(self)
    }
}

impl support::IntoDart for DeviceListChange {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.kind.into_into_dart().into_dart(),
            self.index.into_into_dart().into_dart(),
            self.device.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DeviceListChange {}
impl rust2dart::IntoIntoDart<DeviceListChange> for DeviceListChange {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for DeviceListChangeKind {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Added => 0,
            Self::Removed => 1,
            Self::Named => 2,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DeviceListChangeKind {}
impl rust2dart::IntoIntoDart<DeviceListChangeKind> for DeviceListChangeKind {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for DeviceListState {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.devices.into_into_dart().into_dart(),
            self.state_id.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DeviceListState {}
impl rust2dart::IntoIntoDart<DeviceListState> for DeviceListState {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for DeviceListUpdate {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.changes.into_into_dart().into_dart(),
            self.state.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DeviceListUpdate {}
impl rust2dart::IntoIntoDart<DeviceListUpdate> for DeviceListUpdate {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for EffectOfTx {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.net_value.into_into_dart().into_dart(),
            self.fee.into_into_dart().into_dart(),
            self.feerate.into_dart(),
            self.foreign_receiving_addresses
                .into_into_dart()
                .into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EffectOfTx {}
impl rust2dart::IntoIntoDart<EffectOfTx> for EffectOfTx {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for mirror_EncodedSignature {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0 .0.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_EncodedSignature {}
impl rust2dart::IntoIntoDart<mirror_EncodedSignature> for EncodedSignature {
    fn into_into_dart(self) -> mirror_EncodedSignature {
        mirror_EncodedSignature(self)
    }
}

impl support::IntoDart for FfiSerial {
    fn into_dart(self) -> support::DartAbi {
        vec![self.available_ports.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for FfiSerial {}
impl rust2dart::IntoIntoDart<FfiSerial> for FfiSerial {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for mirror_FirmwareUpgradeConfirmState {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.confirmations.into_into_dart().into_dart(),
            self.0.devices.into_into_dart().into_dart(),
            self.0.need_upgrade.into_into_dart().into_dart(),
            self.0.abort.into_into_dart().into_dart(),
            self.0.upgrade_ready_to_start.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_FirmwareUpgradeConfirmState {}
impl rust2dart::IntoIntoDart<mirror_FirmwareUpgradeConfirmState> for FirmwareUpgradeConfirmState {
    fn into_into_dart(self) -> mirror_FirmwareUpgradeConfirmState {
        mirror_FirmwareUpgradeConfirmState(self)
    }
}

impl support::IntoDart for FrostKey {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for FrostKey {}
impl rust2dart::IntoIntoDart<FrostKey> for FrostKey {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for mirror_KeyGenState {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.devices.into_into_dart().into_dart(),
            self.0.got_shares.into_into_dart().into_dart(),
            self.0.session_acks.into_into_dart().into_dart(),
            self.0.session_hash.into_dart(),
            self.0.finished.map(|v| mirror_KeyId(v)).into_dart(),
            self.0.aborted.into_dart(),
            self.0.threshold.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_KeyGenState {}
impl rust2dart::IntoIntoDart<mirror_KeyGenState> for KeyGenState {
    fn into_into_dart(self) -> mirror_KeyGenState {
        mirror_KeyGenState(self)
    }
}

impl support::IntoDart for mirror_KeyId {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0 .0.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_KeyId {}
impl rust2dart::IntoIntoDart<mirror_KeyId> for KeyId {
    fn into_into_dart(self) -> mirror_KeyId {
        mirror_KeyId(self)
    }
}

impl support::IntoDart for KeyState {
    fn into_dart(self) -> support::DartAbi {
        vec![self.keys.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for KeyState {}
impl rust2dart::IntoIntoDart<KeyState> for KeyState {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for PortBytesToRead {
    fn into_dart(self) -> support::DartAbi {
        vec![self.id.into_into_dart().into_dart(), self.ready.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PortBytesToRead {}
impl rust2dart::IntoIntoDart<PortBytesToRead> for PortBytesToRead {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for PortEvent {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Open { request } => vec![0.into_dart(), request.into_into_dart().into_dart()],
            Self::Write { request } => vec![1.into_dart(), request.into_into_dart().into_dart()],
            Self::Read { request } => vec![2.into_dart(), request.into_into_dart().into_dart()],
            Self::BytesToRead { request } => {
                vec![3.into_dart(), request.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PortEvent {}
impl rust2dart::IntoIntoDart<PortEvent> for PortEvent {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for PortOpen {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.baud_rate.into_into_dart().into_dart(),
            self.ready.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PortOpen {}
impl rust2dart::IntoIntoDart<PortOpen> for PortOpen {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for PortRead {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.len.into_into_dart().into_dart(),
            self.ready.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PortRead {}
impl rust2dart::IntoIntoDart<PortRead> for PortRead {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for PortWrite {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.bytes.into_into_dart().into_dart(),
            self.ready.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PortWrite {}
impl rust2dart::IntoIntoDart<PortWrite> for PortWrite {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for Psbt {
    fn into_dart(self) -> support::DartAbi {
        vec![self.inner.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Psbt {}
impl rust2dart::IntoIntoDart<Psbt> for Psbt {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for QrDecoderStatus {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Progress(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::Decoded(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
            Self::Failed(field0) => vec![2.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for QrDecoderStatus {}
impl rust2dart::IntoIntoDart<QrDecoderStatus> for QrDecoderStatus {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for QrReader {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for QrReader {}
impl rust2dart::IntoIntoDart<QrReader> for QrReader {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for SignTaskDescription {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Plain { message } => vec![0.into_dart(), message.into_into_dart().into_dart()],
            Self::Transaction { unsigned_tx } => {
                vec![1.into_dart(), unsigned_tx.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for SignTaskDescription {}
impl rust2dart::IntoIntoDart<SignTaskDescription> for SignTaskDescription {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for SignedTx {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.signed_tx.into_dart(),
            self.unsigned_tx.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for SignedTx {}
impl rust2dart::IntoIntoDart<SignedTx> for SignedTx {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for mirror_SigningState {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.got_shares.into_into_dart().into_dart(),
            self.0.needed_from.into_into_dart().into_dart(),
            self.0.finished_signatures.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_SigningState {}
impl rust2dart::IntoIntoDart<mirror_SigningState> for SigningState {
    fn into_into_dart(self) -> mirror_SigningState {
        mirror_SigningState(self)
    }
}

impl support::IntoDart for Transaction {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.net_value.into_into_dart().into_dart(),
            self.inner.into_dart(),
            self.confirmation_time
                .map(|v| mirror_ConfirmationTime(v))
                .into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Transaction {}
impl rust2dart::IntoIntoDart<Transaction> for Transaction {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for TxState {
    fn into_dart(self) -> support::DartAbi {
        vec![self.txs.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TxState {}
impl rust2dart::IntoIntoDart<TxState> for TxState {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for UnsignedTx {
    fn into_dart(self) -> support::DartAbi {
        vec![self.template_tx.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for UnsignedTx {}
impl rust2dart::IntoIntoDart<UnsignedTx> for UnsignedTx {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for Wallet {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.inner.into_dart(),
            self.wallet_streams.into_dart(),
            self.chain_sync.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Wallet {}
impl rust2dart::IntoIntoDart<Wallet> for Wallet {
    fn into_into_dart(self) -> Self {
        self
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "bridge_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use self::web::*;

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use self::io::*;
