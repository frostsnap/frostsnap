import '../fetch.just'

default: gen run

API_DIR := "rust/src/api"
CANARY  := "binding-rerun.sha256"

gen +ARGS="":
    flutter_rust_bridge_codegen generate {{ARGS}}
    find {{API_DIR}} -type f -exec sha256sum {} + > {{CANARY}}

build TARGET="linux" +ARGS="": maybe-gen
    BUNDLE_FIRMWARE=1 flutter build {{TARGET}} {{ARGS}}

run +ARGS="": maybe-gen
    just ../build-device
    just ../save-image
    BUNDLE_FIRMWARE=1 flutter run {{ARGS}}

run-secure +ARGS="": maybe-gen
    just ../build-secure
    BUNDLE_FIRMWARE=1 flutter run {{ARGS}}

maybe-gen:
    #!/bin/sh
    if ! sha256sum --check {{CANARY}} >/dev/null 2>&1 ; then
       echo "{{CANARY}} changed so re-running bindgen">&2;
       just gen
    fi

flutter_rust_bridge_version:
    #!/bin/sh
    flutter_rust_bridge_version=$(cargo tree --prefix none  | sed -n 's/flutter_rust_bridge v//p')
    echo $flutter_rust_bridge_version


install-cargo-bins:
    #!/bin/sh
    flutter_rust_bridge_version=$(just flutter_rust_bridge_version)
    if ! test "$flutter_rust_bridge_version"; then
        echo "couldn't determine version for flutter_rust_bridge" >&2;
        exit 1
    fi
    cargo install cargo-ndk@3.5.4 espflash@3.2.0 cargo-expand@1.0.95 "flutter_rust_bridge_codegen@$flutter_rust_bridge_version"

build-appimage +ARGS="":
    #!/bin/sh
    if [ ! -d "build/linux/x64/release/bundle" ]; then
        echo "ERROR: Flutter build not found at build/linux/x64/release/bundle" >&2
        echo "Run 'just build linux --release' first" >&2
        exit 1
    fi
    dir="appimage/AppDir"
    executable="$dir/usr/Frostsnap"
    rm -rf "$dir"
    mkdir -p "$dir/usr"
    cp -r appimage/assets/* "$dir/"
    cp -rp build/linux/x64/release/bundle/* $dir/usr
    # github actions caching loses the 'u+x'
    chmod u+x "$executable" || exit 1;

    echo "final bundled libs:" >&2;
    ls -l $dir/usr/* >&2
    just fetch https://github.com/linuxdeploy/linuxdeploy/releases/download/1-alpha-20250213-2/linuxdeploy-x86_64.AppImage appimage/linuxdeploy
    chmod u+x appimage/linuxdeploy

    export LD_LIBRARY_PATH="$dir/usr/lib:${LD_LIBRARY_PATH:-}"
    appimage/linuxdeploy \
    --appdir $dir \
    --desktop-file "$dir/com.frostsnapp.app.desktop" \
    --icon-file "$dir/Frostsnap.png" \
    --executable "$executable" \
    --output appimage

clean:
    flutter clean
    cd rust && cargo clean
