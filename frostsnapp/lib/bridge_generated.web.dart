// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';

class NativePlatform extends FlutterRustBridgeBase<NativeWire>
    with FlutterRustBridgeSetupMixin {
  NativePlatform(FutureOr<WasmModule> dylib) : super(NativeWire(dylib)) {
    setupMixinConstructor();
  }
  Future<void> setup() => inner.init;

// Section: api2wire

  @protected
  Object api2wire_FrostsnapCoreSchnorrFunFrostFrostKeyNormal(
      FrostsnapCoreSchnorrFunFrostFrostKeyNormal raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_PortBytesToReadSender(PortBytesToReadSender raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_PortOpenSender(PortOpenSender raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_PortReadSender(PortReadSender raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_PortWriteSender(PortWriteSender raw) {
    return raw.shareOrMove();
  }

  @protected
  String api2wire_String(String raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_box_autoadd_device_id(DeviceId raw) {
    return api2wire_device_id(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_frost_key(FrostKey raw) {
    return api2wire_frost_key(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_port_bytes_to_read(PortBytesToRead raw) {
    return api2wire_port_bytes_to_read(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_port_open(PortOpen raw) {
    return api2wire_port_open(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_port_read(PortRead raw) {
    return api2wire_port_read(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_port_write(PortWrite raw) {
    return api2wire_port_write(raw);
  }

  @protected
  List<dynamic> api2wire_device_id(DeviceId raw) {
    return [api2wire_u8_array_33(raw.field0)];
  }

  @protected
  List<dynamic> api2wire_frost_key(FrostKey raw) {
    return [api2wire_FrostsnapCoreSchnorrFunFrostFrostKeyNormal(raw.field0)];
  }

  @protected
  List<dynamic> api2wire_list_device_id(List<DeviceId> raw) {
    return raw.map(api2wire_device_id).toList();
  }

  @protected
  List<dynamic> api2wire_list_port_desc(List<PortDesc> raw) {
    return raw.map(api2wire_port_desc).toList();
  }

  @protected
  String? api2wire_opt_String(String? raw) {
    return raw == null ? null : api2wire_String(raw);
  }

  @protected
  List<dynamic> api2wire_port_bytes_to_read(PortBytesToRead raw) {
    return [api2wire_String(raw.id), api2wire_PortBytesToReadSender(raw.ready)];
  }

  @protected
  List<dynamic> api2wire_port_desc(PortDesc raw) {
    return [
      api2wire_String(raw.id),
      api2wire_u16(raw.vid),
      api2wire_u16(raw.pid)
    ];
  }

  @protected
  List<dynamic> api2wire_port_open(PortOpen raw) {
    return [
      api2wire_String(raw.id),
      api2wire_u32(raw.baudRate),
      api2wire_PortOpenSender(raw.ready)
    ];
  }

  @protected
  List<dynamic> api2wire_port_read(PortRead raw) {
    return [
      api2wire_String(raw.id),
      api2wire_usize(raw.len),
      api2wire_PortReadSender(raw.ready)
    ];
  }

  @protected
  List<dynamic> api2wire_port_write(PortWrite raw) {
    return [
      api2wire_String(raw.id),
      api2wire_uint_8_list(raw.bytes),
      api2wire_PortWriteSender(raw.ready)
    ];
  }

  @protected
  Uint8List api2wire_u8_array_33(U8Array33 raw) {
    return Uint8List.fromList(raw);
  }

  @protected
  Uint8List api2wire_uint_8_list(Uint8List raw) {
    return raw;
  }

// Section: finalizer

  late final Finalizer<PlatformPointer>
      _FrostsnapCoreSchnorrFunFrostFrostKeyNormalFinalizer =
      Finalizer<PlatformPointer>(
          inner.drop_opaque_FrostsnapCoreSchnorrFunFrostFrostKeyNormal);
  Finalizer<PlatformPointer>
      get FrostsnapCoreSchnorrFunFrostFrostKeyNormalFinalizer =>
          _FrostsnapCoreSchnorrFunFrostFrostKeyNormalFinalizer;
  late final Finalizer<PlatformPointer> _PortBytesToReadSenderFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_PortBytesToReadSender);
  Finalizer<PlatformPointer> get PortBytesToReadSenderFinalizer =>
      _PortBytesToReadSenderFinalizer;
  late final Finalizer<PlatformPointer> _PortOpenSenderFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_PortOpenSender);
  Finalizer<PlatformPointer> get PortOpenSenderFinalizer =>
      _PortOpenSenderFinalizer;
  late final Finalizer<PlatformPointer> _PortReadSenderFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_PortReadSender);
  Finalizer<PlatformPointer> get PortReadSenderFinalizer =>
      _PortReadSenderFinalizer;
  late final Finalizer<PlatformPointer> _PortWriteSenderFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_PortWriteSender);
  Finalizer<PlatformPointer> get PortWriteSenderFinalizer =>
      _PortWriteSenderFinalizer;
}

// Section: WASM wire module

@JS('wasm_bindgen')
external NativeWasmModule get wasmModule;

@JS()
@anonymous
class NativeWasmModule implements WasmModule {
  external Object /* Promise */ call([String? moduleName]);
  external NativeWasmModule bind(dynamic thisArg, String moduleName);
  external dynamic /* void */ wire_sub_port_events(NativePortType port_);

  external dynamic /* void */ wire_sub_device_events(NativePortType port_);

  external dynamic /* void */ wire_sub_key_events(NativePortType port_);

  external dynamic /* void */ wire_turn_stderr_logging_on(
      NativePortType port_, int level);

  external dynamic /* void */ wire_turn_logcat_logging_on(
      NativePortType port_, int _level);

  external dynamic /* void */ wire_announce_available_ports(
      NativePortType port_, List<dynamic> ports);

  external dynamic /* void */ wire_switch_to_host_handles_serial(
      NativePortType port_);

  external dynamic /* void */ wire_update_name_preview(
      NativePortType port_, List<dynamic> id, String name);

  external dynamic /* void */ wire_finish_naming(
      NativePortType port_, List<dynamic> id, String name);

  external dynamic /* void */ wire_send_cancel(
      NativePortType port_, List<dynamic> id);

  external dynamic /* void */ wire_cancel_all(NativePortType port_);

  external dynamic /* void */ wire_registered_devices(NativePortType port_);

  external dynamic /* void */ wire_start_coordinator_thread(
      NativePortType port_);

  external dynamic /* List<dynamic> */ wire_key_state();

  external dynamic /* void */ wire_generate_new_key(
      NativePortType port_, int threshold, List<dynamic> devices);

  external dynamic /* int */ wire_threshold__method__FrostKey(
      List<dynamic> that);

  external dynamic /* List<dynamic> */ wire_id__method__FrostKey(
      List<dynamic> that);

  external dynamic /* String */ wire_name__method__FrostKey(List<dynamic> that);

  external dynamic /* void */ wire_satisfy__method__PortOpen(
      NativePortType port_, List<dynamic> that, String? err);

  external dynamic /* void */ wire_satisfy__method__PortRead(
      NativePortType port_, List<dynamic> that, Uint8List bytes, String? err);

  external dynamic /* void */ wire_satisfy__method__PortWrite(
      NativePortType port_, List<dynamic> that, String? err);

  external dynamic /* void */ wire_satisfy__method__PortBytesToRead(
      NativePortType port_, List<dynamic> that, int bytes_to_read);

  external dynamic /*  */
      drop_opaque_FrostsnapCoreSchnorrFunFrostFrostKeyNormal(ptr);

  external int /* *const c_void */
      share_opaque_FrostsnapCoreSchnorrFunFrostFrostKeyNormal(ptr);

  external dynamic /*  */ drop_opaque_PortBytesToReadSender(ptr);

  external int /* *const c_void */ share_opaque_PortBytesToReadSender(ptr);

  external dynamic /*  */ drop_opaque_PortOpenSender(ptr);

  external int /* *const c_void */ share_opaque_PortOpenSender(ptr);

  external dynamic /*  */ drop_opaque_PortReadSender(ptr);

  external int /* *const c_void */ share_opaque_PortReadSender(ptr);

  external dynamic /*  */ drop_opaque_PortWriteSender(ptr);

  external int /* *const c_void */ share_opaque_PortWriteSender(ptr);
}

// Section: WASM wire connector

class NativeWire extends FlutterRustBridgeWasmWireBase<NativeWasmModule> {
  NativeWire(FutureOr<WasmModule> module)
      : super(WasmModule.cast<NativeWasmModule>(module));

  void wire_sub_port_events(NativePortType port_) =>
      wasmModule.wire_sub_port_events(port_);

  void wire_sub_device_events(NativePortType port_) =>
      wasmModule.wire_sub_device_events(port_);

  void wire_sub_key_events(NativePortType port_) =>
      wasmModule.wire_sub_key_events(port_);

  void wire_turn_stderr_logging_on(NativePortType port_, int level) =>
      wasmModule.wire_turn_stderr_logging_on(port_, level);

  void wire_turn_logcat_logging_on(NativePortType port_, int _level) =>
      wasmModule.wire_turn_logcat_logging_on(port_, _level);

  void wire_announce_available_ports(
          NativePortType port_, List<dynamic> ports) =>
      wasmModule.wire_announce_available_ports(port_, ports);

  void wire_switch_to_host_handles_serial(NativePortType port_) =>
      wasmModule.wire_switch_to_host_handles_serial(port_);

  void wire_update_name_preview(
          NativePortType port_, List<dynamic> id, String name) =>
      wasmModule.wire_update_name_preview(port_, id, name);

  void wire_finish_naming(
          NativePortType port_, List<dynamic> id, String name) =>
      wasmModule.wire_finish_naming(port_, id, name);

  void wire_send_cancel(NativePortType port_, List<dynamic> id) =>
      wasmModule.wire_send_cancel(port_, id);

  void wire_cancel_all(NativePortType port_) =>
      wasmModule.wire_cancel_all(port_);

  void wire_registered_devices(NativePortType port_) =>
      wasmModule.wire_registered_devices(port_);

  void wire_start_coordinator_thread(NativePortType port_) =>
      wasmModule.wire_start_coordinator_thread(port_);

  dynamic /* List<dynamic> */ wire_key_state() => wasmModule.wire_key_state();

  void wire_generate_new_key(
          NativePortType port_, int threshold, List<dynamic> devices) =>
      wasmModule.wire_generate_new_key(port_, threshold, devices);

  dynamic /* int */ wire_threshold__method__FrostKey(List<dynamic> that) =>
      wasmModule.wire_threshold__method__FrostKey(that);

  dynamic /* List<dynamic> */ wire_id__method__FrostKey(List<dynamic> that) =>
      wasmModule.wire_id__method__FrostKey(that);

  dynamic /* String */ wire_name__method__FrostKey(List<dynamic> that) =>
      wasmModule.wire_name__method__FrostKey(that);

  void wire_satisfy__method__PortOpen(
          NativePortType port_, List<dynamic> that, String? err) =>
      wasmModule.wire_satisfy__method__PortOpen(port_, that, err);

  void wire_satisfy__method__PortRead(NativePortType port_, List<dynamic> that,
          Uint8List bytes, String? err) =>
      wasmModule.wire_satisfy__method__PortRead(port_, that, bytes, err);

  void wire_satisfy__method__PortWrite(
          NativePortType port_, List<dynamic> that, String? err) =>
      wasmModule.wire_satisfy__method__PortWrite(port_, that, err);

  void wire_satisfy__method__PortBytesToRead(
          NativePortType port_, List<dynamic> that, int bytes_to_read) =>
      wasmModule.wire_satisfy__method__PortBytesToRead(
          port_, that, bytes_to_read);

  dynamic /*  */ drop_opaque_FrostsnapCoreSchnorrFunFrostFrostKeyNormal(ptr) =>
      wasmModule.drop_opaque_FrostsnapCoreSchnorrFunFrostFrostKeyNormal(ptr);

  int /* *const c_void */
      share_opaque_FrostsnapCoreSchnorrFunFrostFrostKeyNormal(ptr) => wasmModule
          .share_opaque_FrostsnapCoreSchnorrFunFrostFrostKeyNormal(ptr);

  dynamic /*  */ drop_opaque_PortBytesToReadSender(ptr) =>
      wasmModule.drop_opaque_PortBytesToReadSender(ptr);

  int /* *const c_void */ share_opaque_PortBytesToReadSender(ptr) =>
      wasmModule.share_opaque_PortBytesToReadSender(ptr);

  dynamic /*  */ drop_opaque_PortOpenSender(ptr) =>
      wasmModule.drop_opaque_PortOpenSender(ptr);

  int /* *const c_void */ share_opaque_PortOpenSender(ptr) =>
      wasmModule.share_opaque_PortOpenSender(ptr);

  dynamic /*  */ drop_opaque_PortReadSender(ptr) =>
      wasmModule.drop_opaque_PortReadSender(ptr);

  int /* *const c_void */ share_opaque_PortReadSender(ptr) =>
      wasmModule.share_opaque_PortReadSender(ptr);

  dynamic /*  */ drop_opaque_PortWriteSender(ptr) =>
      wasmModule.drop_opaque_PortWriteSender(ptr);

  int /* *const c_void */ share_opaque_PortWriteSender(ptr) =>
      wasmModule.share_opaque_PortWriteSender(ptr);
}
