// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';
import 'dart:ffi' as ffi;

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  wire_ArcMutexVecPortDesc api2wire_ArcMutexVecPortDesc(
      ArcMutexVecPortDesc raw) {
    final ptr = inner.new_ArcMutexVecPortDesc();
    _api_fill_to_wire_ArcMutexVecPortDesc(raw, ptr);
    return ptr;
  }

  @protected
  wire_ArcRTransaction api2wire_ArcRTransaction(ArcRTransaction raw) {
    final ptr = inner.new_ArcRTransaction();
    _api_fill_to_wire_ArcRTransaction(raw, ptr);
    return ptr;
  }

  @protected
  wire_BitcoinNetwork api2wire_BitcoinNetwork(BitcoinNetwork raw) {
    final ptr = inner.new_BitcoinNetwork();
    _api_fill_to_wire_BitcoinNetwork(raw, ptr);
    return ptr;
  }

  @protected
  wire_BitcoinPsbt api2wire_BitcoinPsbt(BitcoinPsbt raw) {
    final ptr = inner.new_BitcoinPsbt();
    _api_fill_to_wire_BitcoinPsbt(raw, ptr);
    return ptr;
  }

  @protected
  wire_ChainSync api2wire_ChainSync(ChainSync raw) {
    final ptr = inner.new_ChainSync();
    _api_fill_to_wire_ChainSync(raw, ptr);
    return ptr;
  }

  @protected
  wire_FfiCoordinator api2wire_FfiCoordinator(FfiCoordinator raw) {
    final ptr = inner.new_FfiCoordinator();
    _api_fill_to_wire_FfiCoordinator(raw, ptr);
    return ptr;
  }

  @protected
  wire_FfiQrReader api2wire_FfiQrReader(FfiQrReader raw) {
    final ptr = inner.new_FfiQrReader();
    _api_fill_to_wire_FfiQrReader(raw, ptr);
    return ptr;
  }

  @protected
  wire_FrostsnapCoreBitcoinTransactionTransactionTemplate
      api2wire_FrostsnapCoreBitcoinTransactionTransactionTemplate(
          FrostsnapCoreBitcoinTransactionTransactionTemplate raw) {
    final ptr = inner.new_FrostsnapCoreBitcoinTransactionTransactionTemplate();
    _api_fill_to_wire_FrostsnapCoreBitcoinTransactionTransactionTemplate(
        raw, ptr);
    return ptr;
  }

  @protected
  wire_FrostsnapCoreCoordinatorFrostKey
      api2wire_FrostsnapCoreCoordinatorFrostKey(
          FrostsnapCoreCoordinatorFrostKey raw) {
    final ptr = inner.new_FrostsnapCoreCoordinatorFrostKey();
    _api_fill_to_wire_FrostsnapCoreCoordinatorFrostKey(raw, ptr);
    return ptr;
  }

  @protected
  wire_MutexBTreeMapKeyIdStreamSinkTxState
      api2wire_MutexBTreeMapKeyIdStreamSinkTxState(
          MutexBTreeMapKeyIdStreamSinkTxState raw) {
    final ptr = inner.new_MutexBTreeMapKeyIdStreamSinkTxState();
    _api_fill_to_wire_MutexBTreeMapKeyIdStreamSinkTxState(raw, ptr);
    return ptr;
  }

  @protected
  wire_MutexFrostsnapWallet api2wire_MutexFrostsnapWallet(
      MutexFrostsnapWallet raw) {
    final ptr = inner.new_MutexFrostsnapWallet();
    _api_fill_to_wire_MutexFrostsnapWallet(raw, ptr);
    return ptr;
  }

  @protected
  wire_PortBytesToReadSender api2wire_PortBytesToReadSender(
      PortBytesToReadSender raw) {
    final ptr = inner.new_PortBytesToReadSender();
    _api_fill_to_wire_PortBytesToReadSender(raw, ptr);
    return ptr;
  }

  @protected
  wire_PortOpenSender api2wire_PortOpenSender(PortOpenSender raw) {
    final ptr = inner.new_PortOpenSender();
    _api_fill_to_wire_PortOpenSender(raw, ptr);
    return ptr;
  }

  @protected
  wire_PortReadSender api2wire_PortReadSender(PortReadSender raw) {
    final ptr = inner.new_PortReadSender();
    _api_fill_to_wire_PortReadSender(raw, ptr);
    return ptr;
  }

  @protected
  wire_PortWriteSender api2wire_PortWriteSender(PortWriteSender raw) {
    final ptr = inner.new_PortWriteSender();
    _api_fill_to_wire_PortWriteSender(raw, ptr);
    return ptr;
  }

  @protected
  wire_RTransaction api2wire_RTransaction(RTransaction raw) {
    final ptr = inner.new_RTransaction();
    _api_fill_to_wire_RTransaction(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList_0(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = api2wire_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_BitcoinContext> api2wire_box_autoadd_bitcoin_context(
      BitcoinContext raw) {
    final ptr = inner.new_box_autoadd_bitcoin_context_0();
    _api_fill_to_wire_bitcoin_context(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ConfirmationTime> api2wire_box_autoadd_confirmation_time(
      ConfirmationTime raw) {
    final ptr = inner.new_box_autoadd_confirmation_time_0();
    _api_fill_to_wire_confirmation_time(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Coordinator> api2wire_box_autoadd_coordinator(
      Coordinator raw) {
    final ptr = inner.new_box_autoadd_coordinator_0();
    _api_fill_to_wire_coordinator(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Device> api2wire_box_autoadd_device(Device raw) {
    final ptr = inner.new_box_autoadd_device_0();
    _api_fill_to_wire_device(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_DeviceId> api2wire_box_autoadd_device_id(DeviceId raw) {
    final ptr = inner.new_box_autoadd_device_id_0();
    _api_fill_to_wire_device_id(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_DeviceListState> api2wire_box_autoadd_device_list_state(
      DeviceListState raw) {
    final ptr = inner.new_box_autoadd_device_list_state_0();
    _api_fill_to_wire_device_list_state(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_FfiSerial> api2wire_box_autoadd_ffi_serial(FfiSerial raw) {
    final ptr = inner.new_box_autoadd_ffi_serial_0();
    _api_fill_to_wire_ffi_serial(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_FrostKey> api2wire_box_autoadd_frost_key(FrostKey raw) {
    final ptr = inner.new_box_autoadd_frost_key_0();
    _api_fill_to_wire_frost_key(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_KeyId> api2wire_box_autoadd_key_id(KeyId raw) {
    final ptr = inner.new_box_autoadd_key_id_0();
    _api_fill_to_wire_key_id(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_PortBytesToRead> api2wire_box_autoadd_port_bytes_to_read(
      PortBytesToRead raw) {
    final ptr = inner.new_box_autoadd_port_bytes_to_read_0();
    _api_fill_to_wire_port_bytes_to_read(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_PortOpen> api2wire_box_autoadd_port_open(PortOpen raw) {
    final ptr = inner.new_box_autoadd_port_open_0();
    _api_fill_to_wire_port_open(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_PortRead> api2wire_box_autoadd_port_read(PortRead raw) {
    final ptr = inner.new_box_autoadd_port_read_0();
    _api_fill_to_wire_port_read(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_PortWrite> api2wire_box_autoadd_port_write(PortWrite raw) {
    final ptr = inner.new_box_autoadd_port_write_0();
    _api_fill_to_wire_port_write(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Psbt> api2wire_box_autoadd_psbt(Psbt raw) {
    final ptr = inner.new_box_autoadd_psbt_0();
    _api_fill_to_wire_psbt(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_QrReader> api2wire_box_autoadd_qr_reader(QrReader raw) {
    final ptr = inner.new_box_autoadd_qr_reader_0();
    _api_fill_to_wire_qr_reader(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SignedTx> api2wire_box_autoadd_signed_tx(SignedTx raw) {
    final ptr = inner.new_box_autoadd_signed_tx_0();
    _api_fill_to_wire_signed_tx(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Transaction> api2wire_box_autoadd_transaction(
      Transaction raw) {
    final ptr = inner.new_box_autoadd_transaction_0();
    _api_fill_to_wire_transaction(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_UnsignedTx> api2wire_box_autoadd_unsigned_tx(
      UnsignedTx raw) {
    final ptr = inner.new_box_autoadd_unsigned_tx_0();
    _api_fill_to_wire_unsigned_tx(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Wallet> api2wire_box_autoadd_wallet(Wallet raw) {
    final ptr = inner.new_box_autoadd_wallet_0();
    _api_fill_to_wire_wallet(raw, ptr.ref);
    return ptr;
  }

  @protected
  int api2wire_i64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_list_device> api2wire_list_device(List<Device> raw) {
    final ans = inner.new_list_device_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_device(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_device_id> api2wire_list_device_id(List<DeviceId> raw) {
    final ans = inner.new_list_device_id_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_device_id(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_encoded_signature> api2wire_list_encoded_signature(
      List<EncodedSignature> raw) {
    final ans = inner.new_list_encoded_signature_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_encoded_signature(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_port_desc> api2wire_list_port_desc(List<PortDesc> raw) {
    final ans = inner.new_list_port_desc_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_port_desc(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_ConfirmationTime> api2wire_opt_box_autoadd_confirmation_time(
      ConfirmationTime? raw) {
    return raw == null
        ? ffi.nullptr
        : api2wire_box_autoadd_confirmation_time(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_u8_array_33(U8Array33 raw) {
    final ans = inner.new_uint_8_list_0(33);
    ans.ref.ptr.asTypedList(33).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_u8_array_64(U8Array64 raw) {
    final ans = inner.new_uint_8_list_0(64);
    ans.ref.ptr.asTypedList(64).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

  late final OpaqueTypeFinalizer _ArcMutexVecPortDescFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_ArcMutexVecPortDescPtr);
  OpaqueTypeFinalizer get ArcMutexVecPortDescFinalizer =>
      _ArcMutexVecPortDescFinalizer;
  late final OpaqueTypeFinalizer _ArcRTransactionFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_ArcRTransactionPtr);
  OpaqueTypeFinalizer get ArcRTransactionFinalizer => _ArcRTransactionFinalizer;
  late final OpaqueTypeFinalizer _BitcoinNetworkFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_BitcoinNetworkPtr);
  OpaqueTypeFinalizer get BitcoinNetworkFinalizer => _BitcoinNetworkFinalizer;
  late final OpaqueTypeFinalizer _BitcoinPsbtFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_BitcoinPsbtPtr);
  OpaqueTypeFinalizer get BitcoinPsbtFinalizer => _BitcoinPsbtFinalizer;
  late final OpaqueTypeFinalizer _ChainSyncFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_ChainSyncPtr);
  OpaqueTypeFinalizer get ChainSyncFinalizer => _ChainSyncFinalizer;
  late final OpaqueTypeFinalizer _FfiCoordinatorFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_FfiCoordinatorPtr);
  OpaqueTypeFinalizer get FfiCoordinatorFinalizer => _FfiCoordinatorFinalizer;
  late final OpaqueTypeFinalizer _FfiQrReaderFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_FfiQrReaderPtr);
  OpaqueTypeFinalizer get FfiQrReaderFinalizer => _FfiQrReaderFinalizer;
  late final OpaqueTypeFinalizer
      _FrostsnapCoreBitcoinTransactionTransactionTemplateFinalizer =
      OpaqueTypeFinalizer(inner
          ._drop_opaque_FrostsnapCoreBitcoinTransactionTransactionTemplatePtr);
  OpaqueTypeFinalizer
      get FrostsnapCoreBitcoinTransactionTransactionTemplateFinalizer =>
          _FrostsnapCoreBitcoinTransactionTransactionTemplateFinalizer;
  late final OpaqueTypeFinalizer _FrostsnapCoreCoordinatorFrostKeyFinalizer =
      OpaqueTypeFinalizer(
          inner._drop_opaque_FrostsnapCoreCoordinatorFrostKeyPtr);
  OpaqueTypeFinalizer get FrostsnapCoreCoordinatorFrostKeyFinalizer =>
      _FrostsnapCoreCoordinatorFrostKeyFinalizer;
  late final OpaqueTypeFinalizer _MutexBTreeMapKeyIdStreamSinkTxStateFinalizer =
      OpaqueTypeFinalizer(
          inner._drop_opaque_MutexBTreeMapKeyIdStreamSinkTxStatePtr);
  OpaqueTypeFinalizer get MutexBTreeMapKeyIdStreamSinkTxStateFinalizer =>
      _MutexBTreeMapKeyIdStreamSinkTxStateFinalizer;
  late final OpaqueTypeFinalizer _MutexFrostsnapWalletFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_MutexFrostsnapWalletPtr);
  OpaqueTypeFinalizer get MutexFrostsnapWalletFinalizer =>
      _MutexFrostsnapWalletFinalizer;
  late final OpaqueTypeFinalizer _PortBytesToReadSenderFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_PortBytesToReadSenderPtr);
  OpaqueTypeFinalizer get PortBytesToReadSenderFinalizer =>
      _PortBytesToReadSenderFinalizer;
  late final OpaqueTypeFinalizer _PortOpenSenderFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_PortOpenSenderPtr);
  OpaqueTypeFinalizer get PortOpenSenderFinalizer => _PortOpenSenderFinalizer;
  late final OpaqueTypeFinalizer _PortReadSenderFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_PortReadSenderPtr);
  OpaqueTypeFinalizer get PortReadSenderFinalizer => _PortReadSenderFinalizer;
  late final OpaqueTypeFinalizer _PortWriteSenderFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_PortWriteSenderPtr);
  OpaqueTypeFinalizer get PortWriteSenderFinalizer => _PortWriteSenderFinalizer;
  late final OpaqueTypeFinalizer _RTransactionFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_RTransactionPtr);
  OpaqueTypeFinalizer get RTransactionFinalizer => _RTransactionFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_ArcMutexVecPortDesc(
      ArcMutexVecPortDesc apiObj, wire_ArcMutexVecPortDesc wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_ArcRTransaction(
      ArcRTransaction apiObj, wire_ArcRTransaction wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_BitcoinNetwork(
      BitcoinNetwork apiObj, wire_BitcoinNetwork wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_BitcoinPsbt(
      BitcoinPsbt apiObj, wire_BitcoinPsbt wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_ChainSync(ChainSync apiObj, wire_ChainSync wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_FfiCoordinator(
      FfiCoordinator apiObj, wire_FfiCoordinator wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_FfiQrReader(
      FfiQrReader apiObj, wire_FfiQrReader wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_FrostsnapCoreBitcoinTransactionTransactionTemplate(
      FrostsnapCoreBitcoinTransactionTransactionTemplate apiObj,
      wire_FrostsnapCoreBitcoinTransactionTransactionTemplate wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_FrostsnapCoreCoordinatorFrostKey(
      FrostsnapCoreCoordinatorFrostKey apiObj,
      wire_FrostsnapCoreCoordinatorFrostKey wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_MutexBTreeMapKeyIdStreamSinkTxState(
      MutexBTreeMapKeyIdStreamSinkTxState apiObj,
      wire_MutexBTreeMapKeyIdStreamSinkTxState wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_MutexFrostsnapWallet(
      MutexFrostsnapWallet apiObj, wire_MutexFrostsnapWallet wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_PortBytesToReadSender(
      PortBytesToReadSender apiObj, wire_PortBytesToReadSender wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_PortOpenSender(
      PortOpenSender apiObj, wire_PortOpenSender wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_PortReadSender(
      PortReadSender apiObj, wire_PortReadSender wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_PortWriteSender(
      PortWriteSender apiObj, wire_PortWriteSender wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_RTransaction(
      RTransaction apiObj, wire_RTransaction wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_bitcoin_context(
      BitcoinContext apiObj, wire_BitcoinContext wireObj) {
    wireObj.network = api2wire_BitcoinNetwork(apiObj.network);
  }

  void _api_fill_to_wire_box_autoadd_bitcoin_context(
      BitcoinContext apiObj, ffi.Pointer<wire_BitcoinContext> wireObj) {
    _api_fill_to_wire_bitcoin_context(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_confirmation_time(
      ConfirmationTime apiObj, ffi.Pointer<wire_ConfirmationTime> wireObj) {
    _api_fill_to_wire_confirmation_time(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_coordinator(
      Coordinator apiObj, ffi.Pointer<wire_Coordinator> wireObj) {
    _api_fill_to_wire_coordinator(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_device(
      Device apiObj, ffi.Pointer<wire_Device> wireObj) {
    _api_fill_to_wire_device(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_device_id(
      DeviceId apiObj, ffi.Pointer<wire_DeviceId> wireObj) {
    _api_fill_to_wire_device_id(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_device_list_state(
      DeviceListState apiObj, ffi.Pointer<wire_DeviceListState> wireObj) {
    _api_fill_to_wire_device_list_state(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_ffi_serial(
      FfiSerial apiObj, ffi.Pointer<wire_FfiSerial> wireObj) {
    _api_fill_to_wire_ffi_serial(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_frost_key(
      FrostKey apiObj, ffi.Pointer<wire_FrostKey> wireObj) {
    _api_fill_to_wire_frost_key(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_key_id(
      KeyId apiObj, ffi.Pointer<wire_KeyId> wireObj) {
    _api_fill_to_wire_key_id(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_port_bytes_to_read(
      PortBytesToRead apiObj, ffi.Pointer<wire_PortBytesToRead> wireObj) {
    _api_fill_to_wire_port_bytes_to_read(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_port_open(
      PortOpen apiObj, ffi.Pointer<wire_PortOpen> wireObj) {
    _api_fill_to_wire_port_open(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_port_read(
      PortRead apiObj, ffi.Pointer<wire_PortRead> wireObj) {
    _api_fill_to_wire_port_read(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_port_write(
      PortWrite apiObj, ffi.Pointer<wire_PortWrite> wireObj) {
    _api_fill_to_wire_port_write(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_psbt(
      Psbt apiObj, ffi.Pointer<wire_Psbt> wireObj) {
    _api_fill_to_wire_psbt(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_qr_reader(
      QrReader apiObj, ffi.Pointer<wire_QrReader> wireObj) {
    _api_fill_to_wire_qr_reader(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_signed_tx(
      SignedTx apiObj, ffi.Pointer<wire_SignedTx> wireObj) {
    _api_fill_to_wire_signed_tx(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_transaction(
      Transaction apiObj, ffi.Pointer<wire_Transaction> wireObj) {
    _api_fill_to_wire_transaction(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_unsigned_tx(
      UnsignedTx apiObj, ffi.Pointer<wire_UnsignedTx> wireObj) {
    _api_fill_to_wire_unsigned_tx(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_wallet(
      Wallet apiObj, ffi.Pointer<wire_Wallet> wireObj) {
    _api_fill_to_wire_wallet(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_confirmation_time(
      ConfirmationTime apiObj, wire_ConfirmationTime wireObj) {
    wireObj.height = api2wire_u32(apiObj.height);
    wireObj.time = api2wire_u64(apiObj.time);
  }

  void _api_fill_to_wire_coordinator(
      Coordinator apiObj, wire_Coordinator wireObj) {
    wireObj.field0 = api2wire_FfiCoordinator(apiObj.field0);
  }

  void _api_fill_to_wire_device(Device apiObj, wire_Device wireObj) {
    wireObj.name = api2wire_opt_String(apiObj.name);
    wireObj.firmware_digest = api2wire_String(apiObj.firmwareDigest);
    wireObj.latest_digest = api2wire_String(apiObj.latestDigest);
    _api_fill_to_wire_device_id(apiObj.id, wireObj.id);
  }

  void _api_fill_to_wire_device_id(DeviceId apiObj, wire_DeviceId wireObj) {
    wireObj.field0 = api2wire_u8_array_33(apiObj.field0);
  }

  void _api_fill_to_wire_device_list_state(
      DeviceListState apiObj, wire_DeviceListState wireObj) {
    wireObj.devices = api2wire_list_device(apiObj.devices);
    wireObj.state_id = api2wire_usize(apiObj.stateId);
  }

  void _api_fill_to_wire_encoded_signature(
      EncodedSignature apiObj, wire_EncodedSignature wireObj) {
    wireObj.field0 = api2wire_u8_array_64(apiObj.field0);
  }

  void _api_fill_to_wire_ffi_serial(FfiSerial apiObj, wire_FfiSerial wireObj) {
    wireObj.available_ports =
        api2wire_ArcMutexVecPortDesc(apiObj.availablePorts);
  }

  void _api_fill_to_wire_frost_key(FrostKey apiObj, wire_FrostKey wireObj) {
    wireObj.field0 = api2wire_FrostsnapCoreCoordinatorFrostKey(apiObj.field0);
  }

  void _api_fill_to_wire_key_id(KeyId apiObj, wire_KeyId wireObj) {
    wireObj.field0 = api2wire_u8_array_33(apiObj.field0);
  }

  void _api_fill_to_wire_port_bytes_to_read(
      PortBytesToRead apiObj, wire_PortBytesToRead wireObj) {
    wireObj.id = api2wire_String(apiObj.id);
    wireObj.ready = api2wire_PortBytesToReadSender(apiObj.ready);
  }

  void _api_fill_to_wire_port_desc(PortDesc apiObj, wire_PortDesc wireObj) {
    wireObj.id = api2wire_String(apiObj.id);
    wireObj.vid = api2wire_u16(apiObj.vid);
    wireObj.pid = api2wire_u16(apiObj.pid);
  }

  void _api_fill_to_wire_port_open(PortOpen apiObj, wire_PortOpen wireObj) {
    wireObj.id = api2wire_String(apiObj.id);
    wireObj.baud_rate = api2wire_u32(apiObj.baudRate);
    wireObj.ready = api2wire_PortOpenSender(apiObj.ready);
  }

  void _api_fill_to_wire_port_read(PortRead apiObj, wire_PortRead wireObj) {
    wireObj.id = api2wire_String(apiObj.id);
    wireObj.len = api2wire_usize(apiObj.len);
    wireObj.ready = api2wire_PortReadSender(apiObj.ready);
  }

  void _api_fill_to_wire_port_write(PortWrite apiObj, wire_PortWrite wireObj) {
    wireObj.id = api2wire_String(apiObj.id);
    wireObj.bytes = api2wire_uint_8_list(apiObj.bytes);
    wireObj.ready = api2wire_PortWriteSender(apiObj.ready);
  }

  void _api_fill_to_wire_psbt(Psbt apiObj, wire_Psbt wireObj) {
    wireObj.inner = api2wire_BitcoinPsbt(apiObj.inner);
  }

  void _api_fill_to_wire_qr_reader(QrReader apiObj, wire_QrReader wireObj) {
    wireObj.field0 = api2wire_FfiQrReader(apiObj.field0);
  }

  void _api_fill_to_wire_signed_tx(SignedTx apiObj, wire_SignedTx wireObj) {
    wireObj.signed_tx = api2wire_RTransaction(apiObj.signedTx);
    _api_fill_to_wire_unsigned_tx(apiObj.unsignedTx, wireObj.unsigned_tx);
  }

  void _api_fill_to_wire_transaction(
      Transaction apiObj, wire_Transaction wireObj) {
    wireObj.net_value = api2wire_i64(apiObj.netValue);
    wireObj.inner = api2wire_ArcRTransaction(apiObj.inner);
    wireObj.confirmation_time =
        api2wire_opt_box_autoadd_confirmation_time(apiObj.confirmationTime);
  }

  void _api_fill_to_wire_unsigned_tx(
      UnsignedTx apiObj, wire_UnsignedTx wireObj) {
    wireObj.template_tx =
        api2wire_FrostsnapCoreBitcoinTransactionTransactionTemplate(
            apiObj.templateTx);
  }

  void _api_fill_to_wire_wallet(Wallet apiObj, wire_Wallet wireObj) {
    wireObj.inner = api2wire_MutexFrostsnapWallet(apiObj.inner);
    wireObj.wallet_streams =
        api2wire_MutexBTreeMapKeyIdStreamSinkTxState(apiObj.walletStreams);
    wireObj.chain_sync = api2wire_ChainSync(apiObj.chainSync);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_sub_port_events(
    int port_,
  ) {
    return _wire_sub_port_events(
      port_,
    );
  }

  late final _wire_sub_port_eventsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_sub_port_events');
  late final _wire_sub_port_events =
      _wire_sub_port_eventsPtr.asFunction<void Function(int)>();

  void wire_sub_device_events(
    int port_,
  ) {
    return _wire_sub_device_events(
      port_,
    );
  }

  late final _wire_sub_device_eventsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_sub_device_events');
  late final _wire_sub_device_events =
      _wire_sub_device_eventsPtr.asFunction<void Function(int)>();

  void wire_turn_stderr_logging_on(
    int port_,
    int level,
  ) {
    return _wire_turn_stderr_logging_on(
      port_,
      level,
    );
  }

  late final _wire_turn_stderr_logging_onPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>(
          'wire_turn_stderr_logging_on');
  late final _wire_turn_stderr_logging_on =
      _wire_turn_stderr_logging_onPtr.asFunction<void Function(int, int)>();

  void wire_turn_logcat_logging_on(
    int port_,
    int _level,
  ) {
    return _wire_turn_logcat_logging_on(
      port_,
      _level,
    );
  }

  late final _wire_turn_logcat_logging_onPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>(
          'wire_turn_logcat_logging_on');
  late final _wire_turn_logcat_logging_on =
      _wire_turn_logcat_logging_onPtr.asFunction<void Function(int, int)>();

  WireSyncReturn wire_device_at_index(
    int index,
  ) {
    return _wire_device_at_index(
      index,
    );
  }

  late final _wire_device_at_indexPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.UintPtr)>>(
          'wire_device_at_index');
  late final _wire_device_at_index =
      _wire_device_at_indexPtr.asFunction<WireSyncReturn Function(int)>();

  WireSyncReturn wire_device_list_state() {
    return _wire_device_list_state();
  }

  late final _wire_device_list_statePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_device_list_state');
  late final _wire_device_list_state =
      _wire_device_list_statePtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_get_device(
    ffi.Pointer<wire_DeviceId> id,
  ) {
    return _wire_get_device(
      id,
    );
  }

  late final _wire_get_devicePtr = _lookup<
          ffi
          .NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_DeviceId>)>>(
      'wire_get_device');
  late final _wire_get_device = _wire_get_devicePtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_DeviceId>)>();

  void wire_load(
    int port_,
    ffi.Pointer<wire_uint_8_list> db_file,
  ) {
    return _wire_load(
      port_,
      db_file,
    );
  }

  late final _wire_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_load');
  late final _wire_load = _wire_loadPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_load_host_handles_serial(
    int port_,
    ffi.Pointer<wire_uint_8_list> db_file,
  ) {
    return _wire_load_host_handles_serial(
      port_,
      db_file,
    );
  }

  late final _wire_load_host_handles_serialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_load_host_handles_serial');
  late final _wire_load_host_handles_serial = _wire_load_host_handles_serialPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_echo_key_id(
    int port_,
    ffi.Pointer<wire_KeyId> key_id,
  ) {
    return _wire_echo_key_id(
      port_,
      key_id,
    );
  }

  late final _wire_echo_key_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_KeyId>)>>('wire_echo_key_id');
  late final _wire_echo_key_id = _wire_echo_key_idPtr
      .asFunction<void Function(int, ffi.Pointer<wire_KeyId>)>();

  WireSyncReturn wire_psbt_bytes_to_psbt(
    ffi.Pointer<wire_uint_8_list> psbt_bytes,
  ) {
    return _wire_psbt_bytes_to_psbt(
      psbt_bytes,
    );
  }

  late final _wire_psbt_bytes_to_psbtPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>)>>('wire_psbt_bytes_to_psbt');
  late final _wire_psbt_bytes_to_psbt = _wire_psbt_bytes_to_psbtPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  void wire_new_qr_reader(
    int port_,
  ) {
    return _wire_new_qr_reader(
      port_,
    );
  }

  late final _wire_new_qr_readerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_new_qr_reader');
  late final _wire_new_qr_reader =
      _wire_new_qr_readerPtr.asFunction<void Function(int)>();

  WireSyncReturn wire_txid__method__Transaction(
    ffi.Pointer<wire_Transaction> that,
  ) {
    return _wire_txid__method__Transaction(
      that,
    );
  }

  late final _wire_txid__method__TransactionPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_Transaction>)>>(
      'wire_txid__method__Transaction');
  late final _wire_txid__method__Transaction =
      _wire_txid__method__TransactionPtr
          .asFunction<WireSyncReturn Function(ffi.Pointer<wire_Transaction>)>();

  WireSyncReturn wire_ready__method__Device(
    ffi.Pointer<wire_Device> that,
  ) {
    return _wire_ready__method__Device(
      that,
    );
  }

  late final _wire_ready__method__DevicePtr = _lookup<
          ffi
          .NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_Device>)>>(
      'wire_ready__method__Device');
  late final _wire_ready__method__Device = _wire_ready__method__DevicePtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_Device>)>();

  WireSyncReturn wire_needs_firmware_upgrade__method__Device(
    ffi.Pointer<wire_Device> that,
  ) {
    return _wire_needs_firmware_upgrade__method__Device(
      that,
    );
  }

  late final _wire_needs_firmware_upgrade__method__DevicePtr = _lookup<
          ffi
          .NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_Device>)>>(
      'wire_needs_firmware_upgrade__method__Device');
  late final _wire_needs_firmware_upgrade__method__Device =
      _wire_needs_firmware_upgrade__method__DevicePtr
          .asFunction<WireSyncReturn Function(ffi.Pointer<wire_Device>)>();

  WireSyncReturn wire_threshold__method__FrostKey(
    ffi.Pointer<wire_FrostKey> that,
  ) {
    return _wire_threshold__method__FrostKey(
      that,
    );
  }

  late final _wire_threshold__method__FrostKeyPtr = _lookup<
          ffi
          .NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_FrostKey>)>>(
      'wire_threshold__method__FrostKey');
  late final _wire_threshold__method__FrostKey =
      _wire_threshold__method__FrostKeyPtr
          .asFunction<WireSyncReturn Function(ffi.Pointer<wire_FrostKey>)>();

  WireSyncReturn wire_id__method__FrostKey(
    ffi.Pointer<wire_FrostKey> that,
  ) {
    return _wire_id__method__FrostKey(
      that,
    );
  }

  late final _wire_id__method__FrostKeyPtr = _lookup<
          ffi
          .NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_FrostKey>)>>(
      'wire_id__method__FrostKey');
  late final _wire_id__method__FrostKey = _wire_id__method__FrostKeyPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_FrostKey>)>();

  WireSyncReturn wire_name__method__FrostKey(
    ffi.Pointer<wire_FrostKey> that,
  ) {
    return _wire_name__method__FrostKey(
      that,
    );
  }

  late final _wire_name__method__FrostKeyPtr = _lookup<
          ffi
          .NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_FrostKey>)>>(
      'wire_name__method__FrostKey');
  late final _wire_name__method__FrostKey = _wire_name__method__FrostKeyPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_FrostKey>)>();

  WireSyncReturn wire_devices__method__FrostKey(
    ffi.Pointer<wire_FrostKey> that,
  ) {
    return _wire_devices__method__FrostKey(
      that,
    );
  }

  late final _wire_devices__method__FrostKeyPtr = _lookup<
          ffi
          .NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_FrostKey>)>>(
      'wire_devices__method__FrostKey');
  late final _wire_devices__method__FrostKey =
      _wire_devices__method__FrostKeyPtr
          .asFunction<WireSyncReturn Function(ffi.Pointer<wire_FrostKey>)>();

  void wire_satisfy__method__PortOpen(
    int port_,
    ffi.Pointer<wire_PortOpen> that,
    ffi.Pointer<wire_uint_8_list> err,
  ) {
    return _wire_satisfy__method__PortOpen(
      port_,
      that,
      err,
    );
  }

  late final _wire_satisfy__method__PortOpenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_PortOpen>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_satisfy__method__PortOpen');
  late final _wire_satisfy__method__PortOpen =
      _wire_satisfy__method__PortOpenPtr.asFunction<
          void Function(int, ffi.Pointer<wire_PortOpen>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_satisfy__method__PortRead(
    int port_,
    ffi.Pointer<wire_PortRead> that,
    ffi.Pointer<wire_uint_8_list> bytes,
    ffi.Pointer<wire_uint_8_list> err,
  ) {
    return _wire_satisfy__method__PortRead(
      port_,
      that,
      bytes,
      err,
    );
  }

  late final _wire_satisfy__method__PortReadPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_PortRead>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_satisfy__method__PortRead');
  late final _wire_satisfy__method__PortRead =
      _wire_satisfy__method__PortReadPtr.asFunction<
          void Function(int, ffi.Pointer<wire_PortRead>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_satisfy__method__PortWrite(
    int port_,
    ffi.Pointer<wire_PortWrite> that,
    ffi.Pointer<wire_uint_8_list> err,
  ) {
    return _wire_satisfy__method__PortWrite(
      port_,
      that,
      err,
    );
  }

  late final _wire_satisfy__method__PortWritePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_PortWrite>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_satisfy__method__PortWrite');
  late final _wire_satisfy__method__PortWrite =
      _wire_satisfy__method__PortWritePtr.asFunction<
          void Function(int, ffi.Pointer<wire_PortWrite>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_satisfy__method__PortBytesToRead(
    int port_,
    ffi.Pointer<wire_PortBytesToRead> that,
    int bytes_to_read,
  ) {
    return _wire_satisfy__method__PortBytesToRead(
      port_,
      that,
      bytes_to_read,
    );
  }

  late final _wire_satisfy__method__PortBytesToReadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_PortBytesToRead>,
              ffi.Uint32)>>('wire_satisfy__method__PortBytesToRead');
  late final _wire_satisfy__method__PortBytesToRead =
      _wire_satisfy__method__PortBytesToReadPtr.asFunction<
          void Function(int, ffi.Pointer<wire_PortBytesToRead>, int)>();

  WireSyncReturn wire_get_device__method__DeviceListState(
    ffi.Pointer<wire_DeviceListState> that,
    ffi.Pointer<wire_DeviceId> id,
  ) {
    return _wire_get_device__method__DeviceListState(
      that,
      id,
    );
  }

  late final _wire_get_device__method__DeviceListStatePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_DeviceListState>,
                  ffi.Pointer<wire_DeviceId>)>>(
      'wire_get_device__method__DeviceListState');
  late final _wire_get_device__method__DeviceListState =
      _wire_get_device__method__DeviceListStatePtr.asFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_DeviceListState>, ffi.Pointer<wire_DeviceId>)>();

  void wire_sub_tx_state__method__Wallet(
    int port_,
    ffi.Pointer<wire_Wallet> that,
    ffi.Pointer<wire_KeyId> key_id,
  ) {
    return _wire_sub_tx_state__method__Wallet(
      port_,
      that,
      key_id,
    );
  }

  late final _wire_sub_tx_state__method__WalletPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Wallet>,
              ffi.Pointer<wire_KeyId>)>>('wire_sub_tx_state__method__Wallet');
  late final _wire_sub_tx_state__method__Wallet =
      _wire_sub_tx_state__method__WalletPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_Wallet>, ffi.Pointer<wire_KeyId>)>();

  WireSyncReturn wire_tx_state__method__Wallet(
    ffi.Pointer<wire_Wallet> that,
    ffi.Pointer<wire_KeyId> key_id,
  ) {
    return _wire_tx_state__method__Wallet(
      that,
      key_id,
    );
  }

  late final _wire_tx_state__method__WalletPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(ffi.Pointer<wire_Wallet>,
              ffi.Pointer<wire_KeyId>)>>('wire_tx_state__method__Wallet');
  late final _wire_tx_state__method__Wallet =
      _wire_tx_state__method__WalletPtr.asFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_Wallet>, ffi.Pointer<wire_KeyId>)>();

  void wire_sync_txids__method__Wallet(
    int port_,
    ffi.Pointer<wire_Wallet> that,
    ffi.Pointer<wire_KeyId> key_id,
    ffi.Pointer<wire_StringList> txids,
  ) {
    return _wire_sync_txids__method__Wallet(
      port_,
      that,
      key_id,
      txids,
    );
  }

  late final _wire_sync_txids__method__WalletPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Wallet>,
                  ffi.Pointer<wire_KeyId>, ffi.Pointer<wire_StringList>)>>(
      'wire_sync_txids__method__Wallet');
  late final _wire_sync_txids__method__Wallet =
      _wire_sync_txids__method__WalletPtr.asFunction<
          void Function(int, ffi.Pointer<wire_Wallet>, ffi.Pointer<wire_KeyId>,
              ffi.Pointer<wire_StringList>)>();

  void wire_sync__method__Wallet(
    int port_,
    ffi.Pointer<wire_Wallet> that,
    ffi.Pointer<wire_KeyId> key_id,
  ) {
    return _wire_sync__method__Wallet(
      port_,
      that,
      key_id,
    );
  }

  late final _wire_sync__method__WalletPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Wallet>,
              ffi.Pointer<wire_KeyId>)>>('wire_sync__method__Wallet');
  late final _wire_sync__method__Wallet =
      _wire_sync__method__WalletPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_Wallet>, ffi.Pointer<wire_KeyId>)>();

  void wire_next_address__method__Wallet(
    int port_,
    ffi.Pointer<wire_Wallet> that,
    ffi.Pointer<wire_KeyId> key_id,
  ) {
    return _wire_next_address__method__Wallet(
      port_,
      that,
      key_id,
    );
  }

  late final _wire_next_address__method__WalletPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Wallet>,
              ffi.Pointer<wire_KeyId>)>>('wire_next_address__method__Wallet');
  late final _wire_next_address__method__Wallet =
      _wire_next_address__method__WalletPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_Wallet>, ffi.Pointer<wire_KeyId>)>();

  WireSyncReturn wire_addresses_state__method__Wallet(
    ffi.Pointer<wire_Wallet> that,
    ffi.Pointer<wire_KeyId> key_id,
  ) {
    return _wire_addresses_state__method__Wallet(
      that,
      key_id,
    );
  }

  late final _wire_addresses_state__method__WalletPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  ffi.Pointer<wire_Wallet>, ffi.Pointer<wire_KeyId>)>>(
      'wire_addresses_state__method__Wallet');
  late final _wire_addresses_state__method__Wallet =
      _wire_addresses_state__method__WalletPtr.asFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_Wallet>, ffi.Pointer<wire_KeyId>)>();

  void wire_send_to__method__Wallet(
    int port_,
    ffi.Pointer<wire_Wallet> that,
    ffi.Pointer<wire_KeyId> key_id,
    ffi.Pointer<wire_uint_8_list> to_address,
    int value,
    double feerate,
  ) {
    return _wire_send_to__method__Wallet(
      port_,
      that,
      key_id,
      to_address,
      value,
      feerate,
    );
  }

  late final _wire_send_to__method__WalletPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Wallet>,
              ffi.Pointer<wire_KeyId>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint64,
              ffi.Double)>>('wire_send_to__method__Wallet');
  late final _wire_send_to__method__Wallet =
      _wire_send_to__method__WalletPtr.asFunction<
          void Function(int, ffi.Pointer<wire_Wallet>, ffi.Pointer<wire_KeyId>,
              ffi.Pointer<wire_uint_8_list>, int, double)>();

  void wire_broadcast_tx__method__Wallet(
    int port_,
    ffi.Pointer<wire_Wallet> that,
    ffi.Pointer<wire_KeyId> key_id,
    ffi.Pointer<wire_SignedTx> tx,
  ) {
    return _wire_broadcast_tx__method__Wallet(
      port_,
      that,
      key_id,
      tx,
    );
  }

  late final _wire_broadcast_tx__method__WalletPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Wallet>,
                  ffi.Pointer<wire_KeyId>, ffi.Pointer<wire_SignedTx>)>>(
      'wire_broadcast_tx__method__Wallet');
  late final _wire_broadcast_tx__method__Wallet =
      _wire_broadcast_tx__method__WalletPtr.asFunction<
          void Function(int, ffi.Pointer<wire_Wallet>, ffi.Pointer<wire_KeyId>,
              ffi.Pointer<wire_SignedTx>)>();

  WireSyncReturn wire_psbt_to_unsigned_tx__method__Wallet(
    ffi.Pointer<wire_Wallet> that,
    ffi.Pointer<wire_Psbt> psbt,
    ffi.Pointer<wire_KeyId> key_id,
  ) {
    return _wire_psbt_to_unsigned_tx__method__Wallet(
      that,
      psbt,
      key_id,
    );
  }

  late final _wire_psbt_to_unsigned_tx__method__WalletPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_Wallet>,
                  ffi.Pointer<wire_Psbt>, ffi.Pointer<wire_KeyId>)>>(
      'wire_psbt_to_unsigned_tx__method__Wallet');
  late final _wire_psbt_to_unsigned_tx__method__Wallet =
      _wire_psbt_to_unsigned_tx__method__WalletPtr.asFunction<
          WireSyncReturn Function(ffi.Pointer<wire_Wallet>,
              ffi.Pointer<wire_Psbt>, ffi.Pointer<wire_KeyId>)>();

  void wire_set_available_ports__method__FfiSerial(
    int port_,
    ffi.Pointer<wire_FfiSerial> that,
    ffi.Pointer<wire_list_port_desc> ports,
  ) {
    return _wire_set_available_ports__method__FfiSerial(
      port_,
      that,
      ports,
    );
  }

  late final _wire_set_available_ports__method__FfiSerialPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_FfiSerial>,
                  ffi.Pointer<wire_list_port_desc>)>>(
      'wire_set_available_ports__method__FfiSerial');
  late final _wire_set_available_ports__method__FfiSerial =
      _wire_set_available_ports__method__FfiSerialPtr.asFunction<
          void Function(int, ffi.Pointer<wire_FfiSerial>,
              ffi.Pointer<wire_list_port_desc>)>();

  void wire_start_thread__method__Coordinator(
    int port_,
    ffi.Pointer<wire_Coordinator> that,
  ) {
    return _wire_start_thread__method__Coordinator(
      port_,
      that,
    );
  }

  late final _wire_start_thread__method__CoordinatorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Coordinator>)>>(
      'wire_start_thread__method__Coordinator');
  late final _wire_start_thread__method__Coordinator =
      _wire_start_thread__method__CoordinatorPtr
          .asFunction<void Function(int, ffi.Pointer<wire_Coordinator>)>();

  void wire_update_name_preview__method__Coordinator(
    int port_,
    ffi.Pointer<wire_Coordinator> that,
    ffi.Pointer<wire_DeviceId> id,
    ffi.Pointer<wire_uint_8_list> name,
  ) {
    return _wire_update_name_preview__method__Coordinator(
      port_,
      that,
      id,
      name,
    );
  }

  late final _wire_update_name_preview__method__CoordinatorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Coordinator>,
                  ffi.Pointer<wire_DeviceId>, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_update_name_preview__method__Coordinator');
  late final _wire_update_name_preview__method__Coordinator =
      _wire_update_name_preview__method__CoordinatorPtr.asFunction<
          void Function(int, ffi.Pointer<wire_Coordinator>,
              ffi.Pointer<wire_DeviceId>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_finish_naming__method__Coordinator(
    int port_,
    ffi.Pointer<wire_Coordinator> that,
    ffi.Pointer<wire_DeviceId> id,
    ffi.Pointer<wire_uint_8_list> name,
  ) {
    return _wire_finish_naming__method__Coordinator(
      port_,
      that,
      id,
      name,
    );
  }

  late final _wire_finish_naming__method__CoordinatorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Coordinator>,
                  ffi.Pointer<wire_DeviceId>, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_finish_naming__method__Coordinator');
  late final _wire_finish_naming__method__Coordinator =
      _wire_finish_naming__method__CoordinatorPtr.asFunction<
          void Function(int, ffi.Pointer<wire_Coordinator>,
              ffi.Pointer<wire_DeviceId>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_send_cancel__method__Coordinator(
    int port_,
    ffi.Pointer<wire_Coordinator> that,
    ffi.Pointer<wire_DeviceId> id,
  ) {
    return _wire_send_cancel__method__Coordinator(
      port_,
      that,
      id,
    );
  }

  late final _wire_send_cancel__method__CoordinatorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Coordinator>,
                  ffi.Pointer<wire_DeviceId>)>>(
      'wire_send_cancel__method__Coordinator');
  late final _wire_send_cancel__method__Coordinator =
      _wire_send_cancel__method__CoordinatorPtr.asFunction<
          void Function(int, ffi.Pointer<wire_Coordinator>,
              ffi.Pointer<wire_DeviceId>)>();

  void wire_cancel_all__method__Coordinator(
    int port_,
    ffi.Pointer<wire_Coordinator> that,
  ) {
    return _wire_cancel_all__method__Coordinator(
      port_,
      that,
    );
  }

  late final _wire_cancel_all__method__CoordinatorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Coordinator>)>>(
      'wire_cancel_all__method__Coordinator');
  late final _wire_cancel_all__method__Coordinator =
      _wire_cancel_all__method__CoordinatorPtr
          .asFunction<void Function(int, ffi.Pointer<wire_Coordinator>)>();

  void wire_display_backup__method__Coordinator(
    int port_,
    ffi.Pointer<wire_Coordinator> that,
    ffi.Pointer<wire_DeviceId> id,
    ffi.Pointer<wire_KeyId> key_id,
  ) {
    return _wire_display_backup__method__Coordinator(
      port_,
      that,
      id,
      key_id,
    );
  }

  late final _wire_display_backup__method__CoordinatorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Coordinator>,
                  ffi.Pointer<wire_DeviceId>, ffi.Pointer<wire_KeyId>)>>(
      'wire_display_backup__method__Coordinator');
  late final _wire_display_backup__method__Coordinator =
      _wire_display_backup__method__CoordinatorPtr.asFunction<
          void Function(int, ffi.Pointer<wire_Coordinator>,
              ffi.Pointer<wire_DeviceId>, ffi.Pointer<wire_KeyId>)>();

  WireSyncReturn wire_key_state__method__Coordinator(
    ffi.Pointer<wire_Coordinator> that,
  ) {
    return _wire_key_state__method__Coordinator(
      that,
    );
  }

  late final _wire_key_state__method__CoordinatorPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_Coordinator>)>>(
      'wire_key_state__method__Coordinator');
  late final _wire_key_state__method__Coordinator =
      _wire_key_state__method__CoordinatorPtr
          .asFunction<WireSyncReturn Function(ffi.Pointer<wire_Coordinator>)>();

  void wire_sub_key_events__method__Coordinator(
    int port_,
    ffi.Pointer<wire_Coordinator> that,
  ) {
    return _wire_sub_key_events__method__Coordinator(
      port_,
      that,
    );
  }

  late final _wire_sub_key_events__method__CoordinatorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Coordinator>)>>(
      'wire_sub_key_events__method__Coordinator');
  late final _wire_sub_key_events__method__Coordinator =
      _wire_sub_key_events__method__CoordinatorPtr
          .asFunction<void Function(int, ffi.Pointer<wire_Coordinator>)>();

  WireSyncReturn wire_get_key__method__Coordinator(
    ffi.Pointer<wire_Coordinator> that,
    ffi.Pointer<wire_KeyId> key_id,
  ) {
    return _wire_get_key__method__Coordinator(
      that,
      key_id,
    );
  }

  late final _wire_get_key__method__CoordinatorPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(ffi.Pointer<wire_Coordinator>,
              ffi.Pointer<wire_KeyId>)>>('wire_get_key__method__Coordinator');
  late final _wire_get_key__method__Coordinator =
      _wire_get_key__method__CoordinatorPtr.asFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_Coordinator>, ffi.Pointer<wire_KeyId>)>();

  WireSyncReturn wire_keys_for_device__method__Coordinator(
    ffi.Pointer<wire_Coordinator> that,
    ffi.Pointer<wire_DeviceId> device_id,
  ) {
    return _wire_keys_for_device__method__Coordinator(
      that,
      device_id,
    );
  }

  late final _wire_keys_for_device__method__CoordinatorPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  ffi.Pointer<wire_Coordinator>, ffi.Pointer<wire_DeviceId>)>>(
      'wire_keys_for_device__method__Coordinator');
  late final _wire_keys_for_device__method__Coordinator =
      _wire_keys_for_device__method__CoordinatorPtr.asFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_Coordinator>, ffi.Pointer<wire_DeviceId>)>();

  void wire_start_signing__method__Coordinator(
    int port_,
    ffi.Pointer<wire_Coordinator> that,
    ffi.Pointer<wire_KeyId> key_id,
    ffi.Pointer<wire_list_device_id> devices,
    ffi.Pointer<wire_uint_8_list> message,
  ) {
    return _wire_start_signing__method__Coordinator(
      port_,
      that,
      key_id,
      devices,
      message,
    );
  }

  late final _wire_start_signing__method__CoordinatorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_Coordinator>,
                  ffi.Pointer<wire_KeyId>,
                  ffi.Pointer<wire_list_device_id>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_start_signing__method__Coordinator');
  late final _wire_start_signing__method__Coordinator =
      _wire_start_signing__method__CoordinatorPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_Coordinator>,
              ffi.Pointer<wire_KeyId>,
              ffi.Pointer<wire_list_device_id>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_start_signing_tx__method__Coordinator(
    int port_,
    ffi.Pointer<wire_Coordinator> that,
    ffi.Pointer<wire_KeyId> key_id,
    ffi.Pointer<wire_UnsignedTx> unsigned_tx,
    ffi.Pointer<wire_list_device_id> devices,
  ) {
    return _wire_start_signing_tx__method__Coordinator(
      port_,
      that,
      key_id,
      unsigned_tx,
      devices,
    );
  }

  late final _wire_start_signing_tx__method__CoordinatorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_Coordinator>,
                  ffi.Pointer<wire_KeyId>,
                  ffi.Pointer<wire_UnsignedTx>,
                  ffi.Pointer<wire_list_device_id>)>>(
      'wire_start_signing_tx__method__Coordinator');
  late final _wire_start_signing_tx__method__Coordinator =
      _wire_start_signing_tx__method__CoordinatorPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_Coordinator>,
              ffi.Pointer<wire_KeyId>,
              ffi.Pointer<wire_UnsignedTx>,
              ffi.Pointer<wire_list_device_id>)>();

  WireSyncReturn wire_nonces_available__method__Coordinator(
    ffi.Pointer<wire_Coordinator> that,
    ffi.Pointer<wire_DeviceId> id,
  ) {
    return _wire_nonces_available__method__Coordinator(
      that,
      id,
    );
  }

  late final _wire_nonces_available__method__CoordinatorPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  ffi.Pointer<wire_Coordinator>, ffi.Pointer<wire_DeviceId>)>>(
      'wire_nonces_available__method__Coordinator');
  late final _wire_nonces_available__method__Coordinator =
      _wire_nonces_available__method__CoordinatorPtr.asFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_Coordinator>, ffi.Pointer<wire_DeviceId>)>();

  void wire_generate_new_key__method__Coordinator(
    int port_,
    ffi.Pointer<wire_Coordinator> that,
    int threshold,
    ffi.Pointer<wire_list_device_id> devices,
  ) {
    return _wire_generate_new_key__method__Coordinator(
      port_,
      that,
      threshold,
      devices,
    );
  }

  late final _wire_generate_new_key__method__CoordinatorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Coordinator>,
                  ffi.UintPtr, ffi.Pointer<wire_list_device_id>)>>(
      'wire_generate_new_key__method__Coordinator');
  late final _wire_generate_new_key__method__Coordinator =
      _wire_generate_new_key__method__CoordinatorPtr.asFunction<
          void Function(int, ffi.Pointer<wire_Coordinator>, int,
              ffi.Pointer<wire_list_device_id>)>();

  WireSyncReturn wire_persisted_sign_session_description__method__Coordinator(
    ffi.Pointer<wire_Coordinator> that,
    ffi.Pointer<wire_KeyId> key_id,
  ) {
    return _wire_persisted_sign_session_description__method__Coordinator(
      that,
      key_id,
    );
  }

  late final _wire_persisted_sign_session_description__method__CoordinatorPtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncReturn Function(
                      ffi.Pointer<wire_Coordinator>, ffi.Pointer<wire_KeyId>)>>(
          'wire_persisted_sign_session_description__method__Coordinator');
  late final _wire_persisted_sign_session_description__method__Coordinator =
      _wire_persisted_sign_session_description__method__CoordinatorPtr
          .asFunction<
              WireSyncReturn Function(
                  ffi.Pointer<wire_Coordinator>, ffi.Pointer<wire_KeyId>)>();

  void wire_try_restore_signing_session__method__Coordinator(
    int port_,
    ffi.Pointer<wire_Coordinator> that,
    ffi.Pointer<wire_KeyId> key_id,
  ) {
    return _wire_try_restore_signing_session__method__Coordinator(
      port_,
      that,
      key_id,
    );
  }

  late final _wire_try_restore_signing_session__method__CoordinatorPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Coordinator>,
                      ffi.Pointer<wire_KeyId>)>>(
          'wire_try_restore_signing_session__method__Coordinator');
  late final _wire_try_restore_signing_session__method__Coordinator =
      _wire_try_restore_signing_session__method__CoordinatorPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_Coordinator>, ffi.Pointer<wire_KeyId>)>();

  void wire_start_firmware_upgrade__method__Coordinator(
    int port_,
    ffi.Pointer<wire_Coordinator> that,
  ) {
    return _wire_start_firmware_upgrade__method__Coordinator(
      port_,
      that,
    );
  }

  late final _wire_start_firmware_upgrade__method__CoordinatorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Coordinator>)>>(
      'wire_start_firmware_upgrade__method__Coordinator');
  late final _wire_start_firmware_upgrade__method__Coordinator =
      _wire_start_firmware_upgrade__method__CoordinatorPtr
          .asFunction<void Function(int, ffi.Pointer<wire_Coordinator>)>();

  WireSyncReturn wire_upgrade_firmware_digest__method__Coordinator(
    ffi.Pointer<wire_Coordinator> that,
  ) {
    return _wire_upgrade_firmware_digest__method__Coordinator(
      that,
    );
  }

  late final _wire_upgrade_firmware_digest__method__CoordinatorPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_Coordinator>)>>(
      'wire_upgrade_firmware_digest__method__Coordinator');
  late final _wire_upgrade_firmware_digest__method__Coordinator =
      _wire_upgrade_firmware_digest__method__CoordinatorPtr
          .asFunction<WireSyncReturn Function(ffi.Pointer<wire_Coordinator>)>();

  void wire_cancel_protocol__method__Coordinator(
    int port_,
    ffi.Pointer<wire_Coordinator> that,
  ) {
    return _wire_cancel_protocol__method__Coordinator(
      port_,
      that,
    );
  }

  late final _wire_cancel_protocol__method__CoordinatorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Coordinator>)>>(
      'wire_cancel_protocol__method__Coordinator');
  late final _wire_cancel_protocol__method__Coordinator =
      _wire_cancel_protocol__method__CoordinatorPtr
          .asFunction<void Function(int, ffi.Pointer<wire_Coordinator>)>();

  void wire_enter_firmware_upgrade_mode__method__Coordinator(
    int port_,
    ffi.Pointer<wire_Coordinator> that,
  ) {
    return _wire_enter_firmware_upgrade_mode__method__Coordinator(
      port_,
      that,
    );
  }

  late final _wire_enter_firmware_upgrade_mode__method__CoordinatorPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Coordinator>)>>(
          'wire_enter_firmware_upgrade_mode__method__Coordinator');
  late final _wire_enter_firmware_upgrade_mode__method__Coordinator =
      _wire_enter_firmware_upgrade_mode__method__CoordinatorPtr
          .asFunction<void Function(int, ffi.Pointer<wire_Coordinator>)>();

  WireSyncReturn wire_descriptor_for_key__method__BitcoinContext(
    ffi.Pointer<wire_BitcoinContext> that,
    ffi.Pointer<wire_KeyId> key_id,
  ) {
    return _wire_descriptor_for_key__method__BitcoinContext(
      that,
      key_id,
    );
  }

  late final _wire_descriptor_for_key__method__BitcoinContextPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  ffi.Pointer<wire_BitcoinContext>, ffi.Pointer<wire_KeyId>)>>(
      'wire_descriptor_for_key__method__BitcoinContext');
  late final _wire_descriptor_for_key__method__BitcoinContext =
      _wire_descriptor_for_key__method__BitcoinContextPtr.asFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_BitcoinContext>, ffi.Pointer<wire_KeyId>)>();

  WireSyncReturn wire_validate_amount__method__BitcoinContext(
    ffi.Pointer<wire_BitcoinContext> that,
    ffi.Pointer<wire_uint_8_list> address,
    int value,
  ) {
    return _wire_validate_amount__method__BitcoinContext(
      that,
      address,
      value,
    );
  }

  late final _wire_validate_amount__method__BitcoinContextPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_BitcoinContext>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint64)>>('wire_validate_amount__method__BitcoinContext');
  late final _wire_validate_amount__method__BitcoinContext =
      _wire_validate_amount__method__BitcoinContextPtr.asFunction<
          WireSyncReturn Function(ffi.Pointer<wire_BitcoinContext>,
              ffi.Pointer<wire_uint_8_list>, int)>();

  WireSyncReturn wire_validate_destination_address__method__BitcoinContext(
    ffi.Pointer<wire_BitcoinContext> that,
    ffi.Pointer<wire_uint_8_list> address,
  ) {
    return _wire_validate_destination_address__method__BitcoinContext(
      that,
      address,
    );
  }

  late final _wire_validate_destination_address__method__BitcoinContextPtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncReturn Function(ffi.Pointer<wire_BitcoinContext>,
                      ffi.Pointer<wire_uint_8_list>)>>(
          'wire_validate_destination_address__method__BitcoinContext');
  late final _wire_validate_destination_address__method__BitcoinContext =
      _wire_validate_destination_address__method__BitcoinContextPtr.asFunction<
          WireSyncReturn Function(ffi.Pointer<wire_BitcoinContext>,
              ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_effect__method__SignedTx(
    ffi.Pointer<wire_SignedTx> that,
    ffi.Pointer<wire_KeyId> key_id,
    wire_BitcoinNetwork network,
  ) {
    return _wire_effect__method__SignedTx(
      that,
      key_id,
      network,
    );
  }

  late final _wire_effect__method__SignedTxPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_SignedTx>,
              ffi.Pointer<wire_KeyId>,
              wire_BitcoinNetwork)>>('wire_effect__method__SignedTx');
  late final _wire_effect__method__SignedTx =
      _wire_effect__method__SignedTxPtr.asFunction<
          WireSyncReturn Function(ffi.Pointer<wire_SignedTx>,
              ffi.Pointer<wire_KeyId>, wire_BitcoinNetwork)>();

  void wire_attach_signatures_to_psbt__method__UnsignedTx(
    int port_,
    ffi.Pointer<wire_UnsignedTx> that,
    ffi.Pointer<wire_list_encoded_signature> signatures,
    ffi.Pointer<wire_Psbt> psbt,
  ) {
    return _wire_attach_signatures_to_psbt__method__UnsignedTx(
      port_,
      that,
      signatures,
      psbt,
    );
  }

  late final _wire_attach_signatures_to_psbt__method__UnsignedTxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_UnsignedTx>,
                  ffi.Pointer<wire_list_encoded_signature>,
                  ffi.Pointer<wire_Psbt>)>>(
      'wire_attach_signatures_to_psbt__method__UnsignedTx');
  late final _wire_attach_signatures_to_psbt__method__UnsignedTx =
      _wire_attach_signatures_to_psbt__method__UnsignedTxPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_UnsignedTx>,
              ffi.Pointer<wire_list_encoded_signature>,
              ffi.Pointer<wire_Psbt>)>();

  void wire_complete__method__UnsignedTx(
    int port_,
    ffi.Pointer<wire_UnsignedTx> that,
    ffi.Pointer<wire_list_encoded_signature> signatures,
  ) {
    return _wire_complete__method__UnsignedTx(
      port_,
      that,
      signatures,
    );
  }

  late final _wire_complete__method__UnsignedTxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_UnsignedTx>,
                  ffi.Pointer<wire_list_encoded_signature>)>>(
      'wire_complete__method__UnsignedTx');
  late final _wire_complete__method__UnsignedTx =
      _wire_complete__method__UnsignedTxPtr.asFunction<
          void Function(int, ffi.Pointer<wire_UnsignedTx>,
              ffi.Pointer<wire_list_encoded_signature>)>();

  WireSyncReturn wire_effect__method__UnsignedTx(
    ffi.Pointer<wire_UnsignedTx> that,
    ffi.Pointer<wire_KeyId> key_id,
    wire_BitcoinNetwork network,
  ) {
    return _wire_effect__method__UnsignedTx(
      that,
      key_id,
      network,
    );
  }

  late final _wire_effect__method__UnsignedTxPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_UnsignedTx>,
              ffi.Pointer<wire_KeyId>,
              wire_BitcoinNetwork)>>('wire_effect__method__UnsignedTx');
  late final _wire_effect__method__UnsignedTx =
      _wire_effect__method__UnsignedTxPtr.asFunction<
          WireSyncReturn Function(ffi.Pointer<wire_UnsignedTx>,
              ffi.Pointer<wire_KeyId>, wire_BitcoinNetwork)>();

  WireSyncReturn wire_to_bytes__method__Psbt(
    ffi.Pointer<wire_Psbt> that,
  ) {
    return _wire_to_bytes__method__Psbt(
      that,
    );
  }

  late final _wire_to_bytes__method__PsbtPtr = _lookup<
          ffi.NativeFunction<WireSyncReturn Function(ffi.Pointer<wire_Psbt>)>>(
      'wire_to_bytes__method__Psbt');
  late final _wire_to_bytes__method__Psbt = _wire_to_bytes__method__PsbtPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_Psbt>)>();

  void wire_decode_from_bytes__method__QrReader(
    int port_,
    ffi.Pointer<wire_QrReader> that,
    ffi.Pointer<wire_uint_8_list> bytes,
  ) {
    return _wire_decode_from_bytes__method__QrReader(
      port_,
      that,
      bytes,
    );
  }

  late final _wire_decode_from_bytes__method__QrReaderPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_QrReader>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_decode_from_bytes__method__QrReader');
  late final _wire_decode_from_bytes__method__QrReader =
      _wire_decode_from_bytes__method__QrReaderPtr.asFunction<
          void Function(int, ffi.Pointer<wire_QrReader>,
              ffi.Pointer<wire_uint_8_list>)>();

  wire_ArcMutexVecPortDesc new_ArcMutexVecPortDesc() {
    return _new_ArcMutexVecPortDesc();
  }

  late final _new_ArcMutexVecPortDescPtr =
      _lookup<ffi.NativeFunction<wire_ArcMutexVecPortDesc Function()>>(
          'new_ArcMutexVecPortDesc');
  late final _new_ArcMutexVecPortDesc = _new_ArcMutexVecPortDescPtr
      .asFunction<wire_ArcMutexVecPortDesc Function()>();

  wire_ArcRTransaction new_ArcRTransaction() {
    return _new_ArcRTransaction();
  }

  late final _new_ArcRTransactionPtr =
      _lookup<ffi.NativeFunction<wire_ArcRTransaction Function()>>(
          'new_ArcRTransaction');
  late final _new_ArcRTransaction =
      _new_ArcRTransactionPtr.asFunction<wire_ArcRTransaction Function()>();

  wire_BitcoinNetwork new_BitcoinNetwork() {
    return _new_BitcoinNetwork();
  }

  late final _new_BitcoinNetworkPtr =
      _lookup<ffi.NativeFunction<wire_BitcoinNetwork Function()>>(
          'new_BitcoinNetwork');
  late final _new_BitcoinNetwork =
      _new_BitcoinNetworkPtr.asFunction<wire_BitcoinNetwork Function()>();

  wire_BitcoinPsbt new_BitcoinPsbt() {
    return _new_BitcoinPsbt();
  }

  late final _new_BitcoinPsbtPtr =
      _lookup<ffi.NativeFunction<wire_BitcoinPsbt Function()>>(
          'new_BitcoinPsbt');
  late final _new_BitcoinPsbt =
      _new_BitcoinPsbtPtr.asFunction<wire_BitcoinPsbt Function()>();

  wire_ChainSync new_ChainSync() {
    return _new_ChainSync();
  }

  late final _new_ChainSyncPtr =
      _lookup<ffi.NativeFunction<wire_ChainSync Function()>>('new_ChainSync');
  late final _new_ChainSync =
      _new_ChainSyncPtr.asFunction<wire_ChainSync Function()>();

  wire_FfiCoordinator new_FfiCoordinator() {
    return _new_FfiCoordinator();
  }

  late final _new_FfiCoordinatorPtr =
      _lookup<ffi.NativeFunction<wire_FfiCoordinator Function()>>(
          'new_FfiCoordinator');
  late final _new_FfiCoordinator =
      _new_FfiCoordinatorPtr.asFunction<wire_FfiCoordinator Function()>();

  wire_FfiQrReader new_FfiQrReader() {
    return _new_FfiQrReader();
  }

  late final _new_FfiQrReaderPtr =
      _lookup<ffi.NativeFunction<wire_FfiQrReader Function()>>(
          'new_FfiQrReader');
  late final _new_FfiQrReader =
      _new_FfiQrReaderPtr.asFunction<wire_FfiQrReader Function()>();

  wire_FrostsnapCoreBitcoinTransactionTransactionTemplate
      new_FrostsnapCoreBitcoinTransactionTransactionTemplate() {
    return _new_FrostsnapCoreBitcoinTransactionTransactionTemplate();
  }

  late final _new_FrostsnapCoreBitcoinTransactionTransactionTemplatePtr =
      _lookup<
              ffi.NativeFunction<
                  wire_FrostsnapCoreBitcoinTransactionTransactionTemplate
                      Function()>>(
          'new_FrostsnapCoreBitcoinTransactionTransactionTemplate');
  late final _new_FrostsnapCoreBitcoinTransactionTransactionTemplate =
      _new_FrostsnapCoreBitcoinTransactionTransactionTemplatePtr.asFunction<
          wire_FrostsnapCoreBitcoinTransactionTransactionTemplate Function()>();

  wire_FrostsnapCoreCoordinatorFrostKey new_FrostsnapCoreCoordinatorFrostKey() {
    return _new_FrostsnapCoreCoordinatorFrostKey();
  }

  late final _new_FrostsnapCoreCoordinatorFrostKeyPtr = _lookup<
          ffi.NativeFunction<wire_FrostsnapCoreCoordinatorFrostKey Function()>>(
      'new_FrostsnapCoreCoordinatorFrostKey');
  late final _new_FrostsnapCoreCoordinatorFrostKey =
      _new_FrostsnapCoreCoordinatorFrostKeyPtr
          .asFunction<wire_FrostsnapCoreCoordinatorFrostKey Function()>();

  wire_MutexBTreeMapKeyIdStreamSinkTxState
      new_MutexBTreeMapKeyIdStreamSinkTxState() {
    return _new_MutexBTreeMapKeyIdStreamSinkTxState();
  }

  late final _new_MutexBTreeMapKeyIdStreamSinkTxStatePtr = _lookup<
          ffi
          .NativeFunction<wire_MutexBTreeMapKeyIdStreamSinkTxState Function()>>(
      'new_MutexBTreeMapKeyIdStreamSinkTxState');
  late final _new_MutexBTreeMapKeyIdStreamSinkTxState =
      _new_MutexBTreeMapKeyIdStreamSinkTxStatePtr
          .asFunction<wire_MutexBTreeMapKeyIdStreamSinkTxState Function()>();

  wire_MutexFrostsnapWallet new_MutexFrostsnapWallet() {
    return _new_MutexFrostsnapWallet();
  }

  late final _new_MutexFrostsnapWalletPtr =
      _lookup<ffi.NativeFunction<wire_MutexFrostsnapWallet Function()>>(
          'new_MutexFrostsnapWallet');
  late final _new_MutexFrostsnapWallet = _new_MutexFrostsnapWalletPtr
      .asFunction<wire_MutexFrostsnapWallet Function()>();

  wire_PortBytesToReadSender new_PortBytesToReadSender() {
    return _new_PortBytesToReadSender();
  }

  late final _new_PortBytesToReadSenderPtr =
      _lookup<ffi.NativeFunction<wire_PortBytesToReadSender Function()>>(
          'new_PortBytesToReadSender');
  late final _new_PortBytesToReadSender = _new_PortBytesToReadSenderPtr
      .asFunction<wire_PortBytesToReadSender Function()>();

  wire_PortOpenSender new_PortOpenSender() {
    return _new_PortOpenSender();
  }

  late final _new_PortOpenSenderPtr =
      _lookup<ffi.NativeFunction<wire_PortOpenSender Function()>>(
          'new_PortOpenSender');
  late final _new_PortOpenSender =
      _new_PortOpenSenderPtr.asFunction<wire_PortOpenSender Function()>();

  wire_PortReadSender new_PortReadSender() {
    return _new_PortReadSender();
  }

  late final _new_PortReadSenderPtr =
      _lookup<ffi.NativeFunction<wire_PortReadSender Function()>>(
          'new_PortReadSender');
  late final _new_PortReadSender =
      _new_PortReadSenderPtr.asFunction<wire_PortReadSender Function()>();

  wire_PortWriteSender new_PortWriteSender() {
    return _new_PortWriteSender();
  }

  late final _new_PortWriteSenderPtr =
      _lookup<ffi.NativeFunction<wire_PortWriteSender Function()>>(
          'new_PortWriteSender');
  late final _new_PortWriteSender =
      _new_PortWriteSenderPtr.asFunction<wire_PortWriteSender Function()>();

  wire_RTransaction new_RTransaction() {
    return _new_RTransaction();
  }

  late final _new_RTransactionPtr =
      _lookup<ffi.NativeFunction<wire_RTransaction Function()>>(
          'new_RTransaction');
  late final _new_RTransaction =
      _new_RTransactionPtr.asFunction<wire_RTransaction Function()>();

  ffi.Pointer<wire_StringList> new_StringList_0(
    int len,
  ) {
    return _new_StringList_0(
      len,
    );
  }

  late final _new_StringList_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>(
      'new_StringList_0');
  late final _new_StringList_0 = _new_StringList_0Ptr
      .asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  ffi.Pointer<wire_BitcoinContext> new_box_autoadd_bitcoin_context_0() {
    return _new_box_autoadd_bitcoin_context_0();
  }

  late final _new_box_autoadd_bitcoin_context_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_BitcoinContext> Function()>>(
          'new_box_autoadd_bitcoin_context_0');
  late final _new_box_autoadd_bitcoin_context_0 =
      _new_box_autoadd_bitcoin_context_0Ptr
          .asFunction<ffi.Pointer<wire_BitcoinContext> Function()>();

  ffi.Pointer<wire_ConfirmationTime> new_box_autoadd_confirmation_time_0() {
    return _new_box_autoadd_confirmation_time_0();
  }

  late final _new_box_autoadd_confirmation_time_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_ConfirmationTime> Function()>>(
      'new_box_autoadd_confirmation_time_0');
  late final _new_box_autoadd_confirmation_time_0 =
      _new_box_autoadd_confirmation_time_0Ptr
          .asFunction<ffi.Pointer<wire_ConfirmationTime> Function()>();

  ffi.Pointer<wire_Coordinator> new_box_autoadd_coordinator_0() {
    return _new_box_autoadd_coordinator_0();
  }

  late final _new_box_autoadd_coordinator_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Coordinator> Function()>>(
          'new_box_autoadd_coordinator_0');
  late final _new_box_autoadd_coordinator_0 = _new_box_autoadd_coordinator_0Ptr
      .asFunction<ffi.Pointer<wire_Coordinator> Function()>();

  ffi.Pointer<wire_Device> new_box_autoadd_device_0() {
    return _new_box_autoadd_device_0();
  }

  late final _new_box_autoadd_device_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Device> Function()>>(
          'new_box_autoadd_device_0');
  late final _new_box_autoadd_device_0 = _new_box_autoadd_device_0Ptr
      .asFunction<ffi.Pointer<wire_Device> Function()>();

  ffi.Pointer<wire_DeviceId> new_box_autoadd_device_id_0() {
    return _new_box_autoadd_device_id_0();
  }

  late final _new_box_autoadd_device_id_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_DeviceId> Function()>>(
          'new_box_autoadd_device_id_0');
  late final _new_box_autoadd_device_id_0 = _new_box_autoadd_device_id_0Ptr
      .asFunction<ffi.Pointer<wire_DeviceId> Function()>();

  ffi.Pointer<wire_DeviceListState> new_box_autoadd_device_list_state_0() {
    return _new_box_autoadd_device_list_state_0();
  }

  late final _new_box_autoadd_device_list_state_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_DeviceListState> Function()>>(
          'new_box_autoadd_device_list_state_0');
  late final _new_box_autoadd_device_list_state_0 =
      _new_box_autoadd_device_list_state_0Ptr
          .asFunction<ffi.Pointer<wire_DeviceListState> Function()>();

  ffi.Pointer<wire_FfiSerial> new_box_autoadd_ffi_serial_0() {
    return _new_box_autoadd_ffi_serial_0();
  }

  late final _new_box_autoadd_ffi_serial_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_FfiSerial> Function()>>(
          'new_box_autoadd_ffi_serial_0');
  late final _new_box_autoadd_ffi_serial_0 = _new_box_autoadd_ffi_serial_0Ptr
      .asFunction<ffi.Pointer<wire_FfiSerial> Function()>();

  ffi.Pointer<wire_FrostKey> new_box_autoadd_frost_key_0() {
    return _new_box_autoadd_frost_key_0();
  }

  late final _new_box_autoadd_frost_key_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_FrostKey> Function()>>(
          'new_box_autoadd_frost_key_0');
  late final _new_box_autoadd_frost_key_0 = _new_box_autoadd_frost_key_0Ptr
      .asFunction<ffi.Pointer<wire_FrostKey> Function()>();

  ffi.Pointer<wire_KeyId> new_box_autoadd_key_id_0() {
    return _new_box_autoadd_key_id_0();
  }

  late final _new_box_autoadd_key_id_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_KeyId> Function()>>(
          'new_box_autoadd_key_id_0');
  late final _new_box_autoadd_key_id_0 = _new_box_autoadd_key_id_0Ptr
      .asFunction<ffi.Pointer<wire_KeyId> Function()>();

  ffi.Pointer<wire_PortBytesToRead> new_box_autoadd_port_bytes_to_read_0() {
    return _new_box_autoadd_port_bytes_to_read_0();
  }

  late final _new_box_autoadd_port_bytes_to_read_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_PortBytesToRead> Function()>>(
          'new_box_autoadd_port_bytes_to_read_0');
  late final _new_box_autoadd_port_bytes_to_read_0 =
      _new_box_autoadd_port_bytes_to_read_0Ptr
          .asFunction<ffi.Pointer<wire_PortBytesToRead> Function()>();

  ffi.Pointer<wire_PortOpen> new_box_autoadd_port_open_0() {
    return _new_box_autoadd_port_open_0();
  }

  late final _new_box_autoadd_port_open_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_PortOpen> Function()>>(
          'new_box_autoadd_port_open_0');
  late final _new_box_autoadd_port_open_0 = _new_box_autoadd_port_open_0Ptr
      .asFunction<ffi.Pointer<wire_PortOpen> Function()>();

  ffi.Pointer<wire_PortRead> new_box_autoadd_port_read_0() {
    return _new_box_autoadd_port_read_0();
  }

  late final _new_box_autoadd_port_read_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_PortRead> Function()>>(
          'new_box_autoadd_port_read_0');
  late final _new_box_autoadd_port_read_0 = _new_box_autoadd_port_read_0Ptr
      .asFunction<ffi.Pointer<wire_PortRead> Function()>();

  ffi.Pointer<wire_PortWrite> new_box_autoadd_port_write_0() {
    return _new_box_autoadd_port_write_0();
  }

  late final _new_box_autoadd_port_write_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_PortWrite> Function()>>(
          'new_box_autoadd_port_write_0');
  late final _new_box_autoadd_port_write_0 = _new_box_autoadd_port_write_0Ptr
      .asFunction<ffi.Pointer<wire_PortWrite> Function()>();

  ffi.Pointer<wire_Psbt> new_box_autoadd_psbt_0() {
    return _new_box_autoadd_psbt_0();
  }

  late final _new_box_autoadd_psbt_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Psbt> Function()>>(
          'new_box_autoadd_psbt_0');
  late final _new_box_autoadd_psbt_0 = _new_box_autoadd_psbt_0Ptr
      .asFunction<ffi.Pointer<wire_Psbt> Function()>();

  ffi.Pointer<wire_QrReader> new_box_autoadd_qr_reader_0() {
    return _new_box_autoadd_qr_reader_0();
  }

  late final _new_box_autoadd_qr_reader_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_QrReader> Function()>>(
          'new_box_autoadd_qr_reader_0');
  late final _new_box_autoadd_qr_reader_0 = _new_box_autoadd_qr_reader_0Ptr
      .asFunction<ffi.Pointer<wire_QrReader> Function()>();

  ffi.Pointer<wire_SignedTx> new_box_autoadd_signed_tx_0() {
    return _new_box_autoadd_signed_tx_0();
  }

  late final _new_box_autoadd_signed_tx_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_SignedTx> Function()>>(
          'new_box_autoadd_signed_tx_0');
  late final _new_box_autoadd_signed_tx_0 = _new_box_autoadd_signed_tx_0Ptr
      .asFunction<ffi.Pointer<wire_SignedTx> Function()>();

  ffi.Pointer<wire_Transaction> new_box_autoadd_transaction_0() {
    return _new_box_autoadd_transaction_0();
  }

  late final _new_box_autoadd_transaction_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Transaction> Function()>>(
          'new_box_autoadd_transaction_0');
  late final _new_box_autoadd_transaction_0 = _new_box_autoadd_transaction_0Ptr
      .asFunction<ffi.Pointer<wire_Transaction> Function()>();

  ffi.Pointer<wire_UnsignedTx> new_box_autoadd_unsigned_tx_0() {
    return _new_box_autoadd_unsigned_tx_0();
  }

  late final _new_box_autoadd_unsigned_tx_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_UnsignedTx> Function()>>(
          'new_box_autoadd_unsigned_tx_0');
  late final _new_box_autoadd_unsigned_tx_0 = _new_box_autoadd_unsigned_tx_0Ptr
      .asFunction<ffi.Pointer<wire_UnsignedTx> Function()>();

  ffi.Pointer<wire_Wallet> new_box_autoadd_wallet_0() {
    return _new_box_autoadd_wallet_0();
  }

  late final _new_box_autoadd_wallet_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Wallet> Function()>>(
          'new_box_autoadd_wallet_0');
  late final _new_box_autoadd_wallet_0 = _new_box_autoadd_wallet_0Ptr
      .asFunction<ffi.Pointer<wire_Wallet> Function()>();

  ffi.Pointer<wire_list_device> new_list_device_0(
    int len,
  ) {
    return _new_list_device_0(
      len,
    );
  }

  late final _new_list_device_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_list_device> Function(ffi.Int32)>>(
      'new_list_device_0');
  late final _new_list_device_0 = _new_list_device_0Ptr
      .asFunction<ffi.Pointer<wire_list_device> Function(int)>();

  ffi.Pointer<wire_list_device_id> new_list_device_id_0(
    int len,
  ) {
    return _new_list_device_id_0(
      len,
    );
  }

  late final _new_list_device_id_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_device_id> Function(
              ffi.Int32)>>('new_list_device_id_0');
  late final _new_list_device_id_0 = _new_list_device_id_0Ptr
      .asFunction<ffi.Pointer<wire_list_device_id> Function(int)>();

  ffi.Pointer<wire_list_encoded_signature> new_list_encoded_signature_0(
    int len,
  ) {
    return _new_list_encoded_signature_0(
      len,
    );
  }

  late final _new_list_encoded_signature_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_encoded_signature> Function(
              ffi.Int32)>>('new_list_encoded_signature_0');
  late final _new_list_encoded_signature_0 = _new_list_encoded_signature_0Ptr
      .asFunction<ffi.Pointer<wire_list_encoded_signature> Function(int)>();

  ffi.Pointer<wire_list_port_desc> new_list_port_desc_0(
    int len,
  ) {
    return _new_list_port_desc_0(
      len,
    );
  }

  late final _new_list_port_desc_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_port_desc> Function(
              ffi.Int32)>>('new_list_port_desc_0');
  late final _new_list_port_desc_0 = _new_list_port_desc_0Ptr
      .asFunction<ffi.Pointer<wire_list_port_desc> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_ArcMutexVecPortDesc(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_ArcMutexVecPortDesc(
      ptr,
    );
  }

  late final _drop_opaque_ArcMutexVecPortDescPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_ArcMutexVecPortDesc');
  late final _drop_opaque_ArcMutexVecPortDesc =
      _drop_opaque_ArcMutexVecPortDescPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_ArcMutexVecPortDesc(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_ArcMutexVecPortDesc(
      ptr,
    );
  }

  late final _share_opaque_ArcMutexVecPortDescPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_ArcMutexVecPortDesc');
  late final _share_opaque_ArcMutexVecPortDesc =
      _share_opaque_ArcMutexVecPortDescPtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_ArcRTransaction(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_ArcRTransaction(
      ptr,
    );
  }

  late final _drop_opaque_ArcRTransactionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_ArcRTransaction');
  late final _drop_opaque_ArcRTransaction = _drop_opaque_ArcRTransactionPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_ArcRTransaction(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_ArcRTransaction(
      ptr,
    );
  }

  late final _share_opaque_ArcRTransactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_ArcRTransaction');
  late final _share_opaque_ArcRTransaction = _share_opaque_ArcRTransactionPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_BitcoinNetwork(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_BitcoinNetwork(
      ptr,
    );
  }

  late final _drop_opaque_BitcoinNetworkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_BitcoinNetwork');
  late final _drop_opaque_BitcoinNetwork = _drop_opaque_BitcoinNetworkPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_BitcoinNetwork(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_BitcoinNetwork(
      ptr,
    );
  }

  late final _share_opaque_BitcoinNetworkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_BitcoinNetwork');
  late final _share_opaque_BitcoinNetwork = _share_opaque_BitcoinNetworkPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_BitcoinPsbt(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_BitcoinPsbt(
      ptr,
    );
  }

  late final _drop_opaque_BitcoinPsbtPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_BitcoinPsbt');
  late final _drop_opaque_BitcoinPsbt = _drop_opaque_BitcoinPsbtPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_BitcoinPsbt(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_BitcoinPsbt(
      ptr,
    );
  }

  late final _share_opaque_BitcoinPsbtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_BitcoinPsbt');
  late final _share_opaque_BitcoinPsbt = _share_opaque_BitcoinPsbtPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_ChainSync(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_ChainSync(
      ptr,
    );
  }

  late final _drop_opaque_ChainSyncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_ChainSync');
  late final _drop_opaque_ChainSync = _drop_opaque_ChainSyncPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_ChainSync(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_ChainSync(
      ptr,
    );
  }

  late final _share_opaque_ChainSyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_ChainSync');
  late final _share_opaque_ChainSync = _share_opaque_ChainSyncPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_FfiCoordinator(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_FfiCoordinator(
      ptr,
    );
  }

  late final _drop_opaque_FfiCoordinatorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_FfiCoordinator');
  late final _drop_opaque_FfiCoordinator = _drop_opaque_FfiCoordinatorPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_FfiCoordinator(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_FfiCoordinator(
      ptr,
    );
  }

  late final _share_opaque_FfiCoordinatorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_FfiCoordinator');
  late final _share_opaque_FfiCoordinator = _share_opaque_FfiCoordinatorPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_FfiQrReader(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_FfiQrReader(
      ptr,
    );
  }

  late final _drop_opaque_FfiQrReaderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_FfiQrReader');
  late final _drop_opaque_FfiQrReader = _drop_opaque_FfiQrReaderPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_FfiQrReader(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_FfiQrReader(
      ptr,
    );
  }

  late final _share_opaque_FfiQrReaderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_FfiQrReader');
  late final _share_opaque_FfiQrReader = _share_opaque_FfiQrReaderPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_FrostsnapCoreBitcoinTransactionTransactionTemplate(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_FrostsnapCoreBitcoinTransactionTransactionTemplate(
      ptr,
    );
  }

  late final _drop_opaque_FrostsnapCoreBitcoinTransactionTransactionTemplatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_FrostsnapCoreBitcoinTransactionTransactionTemplate');
  late final _drop_opaque_FrostsnapCoreBitcoinTransactionTransactionTemplate =
      _drop_opaque_FrostsnapCoreBitcoinTransactionTransactionTemplatePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void>
      share_opaque_FrostsnapCoreBitcoinTransactionTransactionTemplate(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_FrostsnapCoreBitcoinTransactionTransactionTemplate(
      ptr,
    );
  }

  late final _share_opaque_FrostsnapCoreBitcoinTransactionTransactionTemplatePtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          'share_opaque_FrostsnapCoreBitcoinTransactionTransactionTemplate');
  late final _share_opaque_FrostsnapCoreBitcoinTransactionTransactionTemplate =
      _share_opaque_FrostsnapCoreBitcoinTransactionTransactionTemplatePtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_FrostsnapCoreCoordinatorFrostKey(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_FrostsnapCoreCoordinatorFrostKey(
      ptr,
    );
  }

  late final _drop_opaque_FrostsnapCoreCoordinatorFrostKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_FrostsnapCoreCoordinatorFrostKey');
  late final _drop_opaque_FrostsnapCoreCoordinatorFrostKey =
      _drop_opaque_FrostsnapCoreCoordinatorFrostKeyPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_FrostsnapCoreCoordinatorFrostKey(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_FrostsnapCoreCoordinatorFrostKey(
      ptr,
    );
  }

  late final _share_opaque_FrostsnapCoreCoordinatorFrostKeyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
      'share_opaque_FrostsnapCoreCoordinatorFrostKey');
  late final _share_opaque_FrostsnapCoreCoordinatorFrostKey =
      _share_opaque_FrostsnapCoreCoordinatorFrostKeyPtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_MutexBTreeMapKeyIdStreamSinkTxState(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_MutexBTreeMapKeyIdStreamSinkTxState(
      ptr,
    );
  }

  late final _drop_opaque_MutexBTreeMapKeyIdStreamSinkTxStatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_MutexBTreeMapKeyIdStreamSinkTxState');
  late final _drop_opaque_MutexBTreeMapKeyIdStreamSinkTxState =
      _drop_opaque_MutexBTreeMapKeyIdStreamSinkTxStatePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_MutexBTreeMapKeyIdStreamSinkTxState(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_MutexBTreeMapKeyIdStreamSinkTxState(
      ptr,
    );
  }

  late final _share_opaque_MutexBTreeMapKeyIdStreamSinkTxStatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
      'share_opaque_MutexBTreeMapKeyIdStreamSinkTxState');
  late final _share_opaque_MutexBTreeMapKeyIdStreamSinkTxState =
      _share_opaque_MutexBTreeMapKeyIdStreamSinkTxStatePtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_MutexFrostsnapWallet(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_MutexFrostsnapWallet(
      ptr,
    );
  }

  late final _drop_opaque_MutexFrostsnapWalletPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_MutexFrostsnapWallet');
  late final _drop_opaque_MutexFrostsnapWallet =
      _drop_opaque_MutexFrostsnapWalletPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_MutexFrostsnapWallet(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_MutexFrostsnapWallet(
      ptr,
    );
  }

  late final _share_opaque_MutexFrostsnapWalletPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_MutexFrostsnapWallet');
  late final _share_opaque_MutexFrostsnapWallet =
      _share_opaque_MutexFrostsnapWalletPtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_PortBytesToReadSender(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_PortBytesToReadSender(
      ptr,
    );
  }

  late final _drop_opaque_PortBytesToReadSenderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_PortBytesToReadSender');
  late final _drop_opaque_PortBytesToReadSender =
      _drop_opaque_PortBytesToReadSenderPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_PortBytesToReadSender(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_PortBytesToReadSender(
      ptr,
    );
  }

  late final _share_opaque_PortBytesToReadSenderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_PortBytesToReadSender');
  late final _share_opaque_PortBytesToReadSender =
      _share_opaque_PortBytesToReadSenderPtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_PortOpenSender(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_PortOpenSender(
      ptr,
    );
  }

  late final _drop_opaque_PortOpenSenderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_PortOpenSender');
  late final _drop_opaque_PortOpenSender = _drop_opaque_PortOpenSenderPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_PortOpenSender(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_PortOpenSender(
      ptr,
    );
  }

  late final _share_opaque_PortOpenSenderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_PortOpenSender');
  late final _share_opaque_PortOpenSender = _share_opaque_PortOpenSenderPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_PortReadSender(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_PortReadSender(
      ptr,
    );
  }

  late final _drop_opaque_PortReadSenderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_PortReadSender');
  late final _drop_opaque_PortReadSender = _drop_opaque_PortReadSenderPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_PortReadSender(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_PortReadSender(
      ptr,
    );
  }

  late final _share_opaque_PortReadSenderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_PortReadSender');
  late final _share_opaque_PortReadSender = _share_opaque_PortReadSenderPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_PortWriteSender(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_PortWriteSender(
      ptr,
    );
  }

  late final _drop_opaque_PortWriteSenderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_PortWriteSender');
  late final _drop_opaque_PortWriteSender = _drop_opaque_PortWriteSenderPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_PortWriteSender(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_PortWriteSender(
      ptr,
    );
  }

  late final _share_opaque_PortWriteSenderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_PortWriteSender');
  late final _share_opaque_PortWriteSender = _share_opaque_PortWriteSenderPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_RTransaction(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_RTransaction(
      ptr,
    );
  }

  late final _drop_opaque_RTransactionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_RTransaction');
  late final _drop_opaque_RTransaction = _drop_opaque_RTransactionPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_RTransaction(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_RTransaction(
      ptr,
    );
  }

  late final _share_opaque_RTransactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_RTransaction');
  late final _share_opaque_RTransaction = _share_opaque_RTransactionPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_DeviceId extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class wire_KeyId extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class wire_ArcRTransaction extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_ConfirmationTime extends ffi.Struct {
  @ffi.Uint32()
  external int height;

  @ffi.Uint64()
  external int time;
}

final class wire_Transaction extends ffi.Struct {
  @ffi.Int64()
  external int net_value;

  external wire_ArcRTransaction inner;

  external ffi.Pointer<wire_ConfirmationTime> confirmation_time;
}

final class wire_Device extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  external ffi.Pointer<wire_uint_8_list> firmware_digest;

  external ffi.Pointer<wire_uint_8_list> latest_digest;

  external wire_DeviceId id;
}

final class wire_FrostsnapCoreCoordinatorFrostKey extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_FrostKey extends ffi.Struct {
  external wire_FrostsnapCoreCoordinatorFrostKey field0;
}

final class wire_PortOpenSender extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_PortOpen extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> id;

  @ffi.Uint32()
  external int baud_rate;

  external wire_PortOpenSender ready;
}

final class wire_PortReadSender extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_PortRead extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> id;

  @ffi.UintPtr()
  external int len;

  external wire_PortReadSender ready;
}

final class wire_PortWriteSender extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_PortWrite extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> id;

  external ffi.Pointer<wire_uint_8_list> bytes;

  external wire_PortWriteSender ready;
}

final class wire_PortBytesToReadSender extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_PortBytesToRead extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> id;

  external wire_PortBytesToReadSender ready;
}

final class wire_list_device extends ffi.Struct {
  external ffi.Pointer<wire_Device> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_DeviceListState extends ffi.Struct {
  external ffi.Pointer<wire_list_device> devices;

  @ffi.UintPtr()
  external int state_id;
}

final class wire_MutexFrostsnapWallet extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_MutexBTreeMapKeyIdStreamSinkTxState extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_ChainSync extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_Wallet extends ffi.Struct {
  external wire_MutexFrostsnapWallet inner;

  external wire_MutexBTreeMapKeyIdStreamSinkTxState wallet_streams;

  external wire_ChainSync chain_sync;
}

final class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_RTransaction extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_FrostsnapCoreBitcoinTransactionTransactionTemplate
    extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_UnsignedTx extends ffi.Struct {
  external wire_FrostsnapCoreBitcoinTransactionTransactionTemplate template_tx;
}

final class wire_SignedTx extends ffi.Struct {
  external wire_RTransaction signed_tx;

  external wire_UnsignedTx unsigned_tx;
}

final class wire_BitcoinPsbt extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_Psbt extends ffi.Struct {
  external wire_BitcoinPsbt inner;
}

final class wire_ArcMutexVecPortDesc extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_FfiSerial extends ffi.Struct {
  external wire_ArcMutexVecPortDesc available_ports;
}

final class wire_PortDesc extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> id;

  @ffi.Uint16()
  external int vid;

  @ffi.Uint16()
  external int pid;
}

final class wire_list_port_desc extends ffi.Struct {
  external ffi.Pointer<wire_PortDesc> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_FfiCoordinator extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_Coordinator extends ffi.Struct {
  external wire_FfiCoordinator field0;
}

final class wire_list_device_id extends ffi.Struct {
  external ffi.Pointer<wire_DeviceId> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_BitcoinNetwork extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_BitcoinContext extends ffi.Struct {
  external wire_BitcoinNetwork network;
}

final class wire_EncodedSignature extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class wire_list_encoded_signature extends ffi.Struct {
  external ffi.Pointer<wire_EncodedSignature> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_FfiQrReader extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_QrReader extends ffi.Struct {
  external wire_FfiQrReader field0;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
