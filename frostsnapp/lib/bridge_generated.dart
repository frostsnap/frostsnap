// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Stream<PortEvent> subPortEvents({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sub_port_events(port_),
      parseSuccessData: _wire2api_port_event,
      parseErrorData: null,
      constMeta: kSubPortEventsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSubPortEventsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sub_port_events",
        argNames: [],
      );

  Stream<DeviceListUpdate> subDeviceEvents({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sub_device_events(port_),
      parseSuccessData: _wire2api_device_list_update,
      parseErrorData: null,
      constMeta: kSubDeviceEventsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSubDeviceEventsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sub_device_events",
        argNames: [],
      );

  Future<void> turnStderrLoggingOn({required LogLevel level, dynamic hint}) {
    var arg0 = api2wire_log_level(level);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_turn_stderr_logging_on(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kTurnStderrLoggingOnConstMeta,
      argValues: [level],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTurnStderrLoggingOnConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "turn_stderr_logging_on",
        argNames: ["level"],
      );

  Future<void> turnLogcatLoggingOn({required LogLevel level, dynamic hint}) {
    var arg0 = api2wire_log_level(level);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_turn_logcat_logging_on(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kTurnLogcatLoggingOnConstMeta,
      argValues: [level],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTurnLogcatLoggingOnConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "turn_logcat_logging_on",
        argNames: ["level"],
      );

  Device? deviceAtIndex({required int index, dynamic hint}) {
    var arg0 = api2wire_usize(index);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_device_at_index(arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_device,
      parseErrorData: null,
      constMeta: kDeviceAtIndexConstMeta,
      argValues: [index],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDeviceAtIndexConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "device_at_index",
        argNames: ["index"],
      );

  DeviceListState deviceListState({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_device_list_state(),
      parseSuccessData: _wire2api_device_list_state,
      parseErrorData: null,
      constMeta: kDeviceListStateConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDeviceListStateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "device_list_state",
        argNames: [],
      );

  Device getDevice({required DeviceId id, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_device_id(id);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_get_device(arg0),
      parseSuccessData: _wire2api_device,
      parseErrorData: null,
      constMeta: kGetDeviceConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetDeviceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_device",
        argNames: ["id"],
      );

  Future<(Coordinator, Wallet, BitcoinContext)> load(
      {required String dbFile, dynamic hint}) {
    var arg0 = _platform.api2wire_String(dbFile);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_load(port_, arg0),
      parseSuccessData: _wire2api___record__coordinator_wallet_bitcoin_context,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kLoadConstMeta,
      argValues: [dbFile],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLoadConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "load",
        argNames: ["dbFile"],
      );

  Future<(Coordinator, FfiSerial, Wallet, BitcoinContext)>
      loadHostHandlesSerial({required String dbFile, dynamic hint}) {
    var arg0 = _platform.api2wire_String(dbFile);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_load_host_handles_serial(port_, arg0),
      parseSuccessData:
          _wire2api___record__coordinator_ffi_serial_wallet_bitcoin_context,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kLoadHostHandlesSerialConstMeta,
      argValues: [dbFile],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLoadHostHandlesSerialConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "load_host_handles_serial",
        argNames: ["dbFile"],
      );

  Future<KeyId> echoKeyId({required KeyId keyId, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_key_id(keyId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_echo_key_id(port_, arg0),
      parseSuccessData: _wire2api_key_id,
      parseErrorData: null,
      constMeta: kEchoKeyIdConstMeta,
      argValues: [keyId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEchoKeyIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "echo_key_id",
        argNames: ["keyId"],
      );

  Psbt psbtBytesToPsbt({required Uint8List psbtBytes, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(psbtBytes);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_psbt_bytes_to_psbt(arg0),
      parseSuccessData: _wire2api_psbt,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kPsbtBytesToPsbtConstMeta,
      argValues: [psbtBytes],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPsbtBytesToPsbtConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "psbt_bytes_to_psbt",
        argNames: ["psbtBytes"],
      );

  Future<QrReader> newQrReader({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new_qr_reader(port_),
      parseSuccessData: (d) => _wire2api_qr_reader(d),
      parseErrorData: null,
      constMeta: kNewQrReaderConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewQrReaderConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new_qr_reader",
        argNames: [],
      );

  String txidMethodTransaction({required Transaction that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_transaction(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_txid__method__Transaction(arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kTxidMethodTransactionConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTxidMethodTransactionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "txid__method__Transaction",
        argNames: ["that"],
      );

  bool readyMethodDevice({required Device that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_device(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_ready__method__Device(arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kReadyMethodDeviceConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReadyMethodDeviceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ready__method__Device",
        argNames: ["that"],
      );

  bool needsFirmwareUpgradeMethodDevice({required Device that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_device(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_needs_firmware_upgrade__method__Device(arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kNeedsFirmwareUpgradeMethodDeviceConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNeedsFirmwareUpgradeMethodDeviceConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "needs_firmware_upgrade__method__Device",
            argNames: ["that"],
          );

  int thresholdMethodFrostKey({required FrostKey that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_frost_key(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_threshold__method__FrostKey(arg0),
      parseSuccessData: _wire2api_usize,
      parseErrorData: null,
      constMeta: kThresholdMethodFrostKeyConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kThresholdMethodFrostKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "threshold__method__FrostKey",
        argNames: ["that"],
      );

  KeyId idMethodFrostKey({required FrostKey that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_frost_key(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_id__method__FrostKey(arg0),
      parseSuccessData: _wire2api_key_id,
      parseErrorData: null,
      constMeta: kIdMethodFrostKeyConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIdMethodFrostKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "id__method__FrostKey",
        argNames: ["that"],
      );

  String nameMethodFrostKey({required FrostKey that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_frost_key(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_name__method__FrostKey(arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kNameMethodFrostKeyConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNameMethodFrostKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "name__method__FrostKey",
        argNames: ["that"],
      );

  List<Device> devicesMethodFrostKey({required FrostKey that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_frost_key(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_devices__method__FrostKey(arg0),
      parseSuccessData: _wire2api_list_device,
      parseErrorData: null,
      constMeta: kDevicesMethodFrostKeyConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDevicesMethodFrostKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "devices__method__FrostKey",
        argNames: ["that"],
      );

  Future<void> satisfyMethodPortOpen(
      {required PortOpen that, String? err, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_port_open(that);
    var arg1 = _platform.api2wire_opt_String(err);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_satisfy__method__PortOpen(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kSatisfyMethodPortOpenConstMeta,
      argValues: [that, err],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSatisfyMethodPortOpenConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "satisfy__method__PortOpen",
        argNames: ["that", "err"],
      );

  Future<void> satisfyMethodPortRead(
      {required PortRead that,
      required Uint8List bytes,
      String? err,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_port_read(that);
    var arg1 = _platform.api2wire_uint_8_list(bytes);
    var arg2 = _platform.api2wire_opt_String(err);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_satisfy__method__PortRead(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kSatisfyMethodPortReadConstMeta,
      argValues: [that, bytes, err],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSatisfyMethodPortReadConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "satisfy__method__PortRead",
        argNames: ["that", "bytes", "err"],
      );

  Future<void> satisfyMethodPortWrite(
      {required PortWrite that, String? err, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_port_write(that);
    var arg1 = _platform.api2wire_opt_String(err);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_satisfy__method__PortWrite(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kSatisfyMethodPortWriteConstMeta,
      argValues: [that, err],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSatisfyMethodPortWriteConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "satisfy__method__PortWrite",
        argNames: ["that", "err"],
      );

  Future<void> satisfyMethodPortBytesToRead(
      {required PortBytesToRead that, required int bytesToRead, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_port_bytes_to_read(that);
    var arg1 = api2wire_u32(bytesToRead);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_satisfy__method__PortBytesToRead(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kSatisfyMethodPortBytesToReadConstMeta,
      argValues: [that, bytesToRead],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSatisfyMethodPortBytesToReadConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "satisfy__method__PortBytesToRead",
        argNames: ["that", "bytesToRead"],
      );

  Device? getDeviceMethodDeviceListState(
      {required DeviceListState that, required DeviceId id, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_device_list_state(that);
    var arg1 = _platform.api2wire_box_autoadd_device_id(id);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_get_device__method__DeviceListState(arg0, arg1),
      parseSuccessData: _wire2api_opt_box_autoadd_device,
      parseErrorData: null,
      constMeta: kGetDeviceMethodDeviceListStateConstMeta,
      argValues: [that, id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetDeviceMethodDeviceListStateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_device__method__DeviceListState",
        argNames: ["that", "id"],
      );

  Stream<TxState> subTxStateMethodWallet(
      {required Wallet that, required KeyId keyId, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wallet(that);
    var arg1 = _platform.api2wire_box_autoadd_key_id(keyId);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_sub_tx_state__method__Wallet(port_, arg0, arg1),
      parseSuccessData: _wire2api_tx_state,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kSubTxStateMethodWalletConstMeta,
      argValues: [that, keyId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSubTxStateMethodWalletConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sub_tx_state__method__Wallet",
        argNames: ["that", "keyId"],
      );

  TxState txStateMethodWallet(
      {required Wallet that, required KeyId keyId, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wallet(that);
    var arg1 = _platform.api2wire_box_autoadd_key_id(keyId);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_tx_state__method__Wallet(arg0, arg1),
      parseSuccessData: _wire2api_tx_state,
      parseErrorData: null,
      constMeta: kTxStateMethodWalletConstMeta,
      argValues: [that, keyId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTxStateMethodWalletConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "tx_state__method__Wallet",
        argNames: ["that", "keyId"],
      );

  Stream<double> syncTxidsMethodWallet(
      {required Wallet that,
      required KeyId keyId,
      required List<String> txids,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wallet(that);
    var arg1 = _platform.api2wire_box_autoadd_key_id(keyId);
    var arg2 = _platform.api2wire_StringList(txids);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_sync_txids__method__Wallet(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_f64,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kSyncTxidsMethodWalletConstMeta,
      argValues: [that, keyId, txids],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncTxidsMethodWalletConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_txids__method__Wallet",
        argNames: ["that", "keyId", "txids"],
      );

  Stream<double> syncMethodWallet(
      {required Wallet that, required KeyId keyId, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wallet(that);
    var arg1 = _platform.api2wire_box_autoadd_key_id(keyId);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_sync__method__Wallet(port_, arg0, arg1),
      parseSuccessData: _wire2api_f64,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kSyncMethodWalletConstMeta,
      argValues: [that, keyId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncMethodWalletConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sync__method__Wallet",
        argNames: ["that", "keyId"],
      );

  Future<Address> nextAddressMethodWallet(
      {required Wallet that, required KeyId keyId, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wallet(that);
    var arg1 = _platform.api2wire_box_autoadd_key_id(keyId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_next_address__method__Wallet(port_, arg0, arg1),
      parseSuccessData: _wire2api_address,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kNextAddressMethodWalletConstMeta,
      argValues: [that, keyId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNextAddressMethodWalletConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "next_address__method__Wallet",
        argNames: ["that", "keyId"],
      );

  List<Address> addressesStateMethodWallet(
      {required Wallet that, required KeyId keyId, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wallet(that);
    var arg1 = _platform.api2wire_box_autoadd_key_id(keyId);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_addresses_state__method__Wallet(arg0, arg1),
      parseSuccessData: _wire2api_list_address,
      parseErrorData: null,
      constMeta: kAddressesStateMethodWalletConstMeta,
      argValues: [that, keyId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddressesStateMethodWalletConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "addresses_state__method__Wallet",
        argNames: ["that", "keyId"],
      );

  Future<UnsignedTx> sendToMethodWallet(
      {required Wallet that,
      required KeyId keyId,
      required String toAddress,
      required int value,
      required double feerate,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wallet(that);
    var arg1 = _platform.api2wire_box_autoadd_key_id(keyId);
    var arg2 = _platform.api2wire_String(toAddress);
    var arg3 = _platform.api2wire_u64(value);
    var arg4 = api2wire_f64(feerate);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_send_to__method__Wallet(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: (d) => _wire2api_unsigned_tx(d),
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kSendToMethodWalletConstMeta,
      argValues: [that, keyId, toAddress, value, feerate],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSendToMethodWalletConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "send_to__method__Wallet",
        argNames: ["that", "keyId", "toAddress", "value", "feerate"],
      );

  Future<void> broadcastTxMethodWallet(
      {required Wallet that,
      required KeyId keyId,
      required SignedTx tx,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wallet(that);
    var arg1 = _platform.api2wire_box_autoadd_key_id(keyId);
    var arg2 = _platform.api2wire_box_autoadd_signed_tx(tx);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_broadcast_tx__method__Wallet(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kBroadcastTxMethodWalletConstMeta,
      argValues: [that, keyId, tx],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBroadcastTxMethodWalletConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "broadcast_tx__method__Wallet",
        argNames: ["that", "keyId", "tx"],
      );

  UnsignedTx psbtToUnsignedTxMethodWallet(
      {required Wallet that,
      required Psbt psbt,
      required KeyId keyId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wallet(that);
    var arg1 = _platform.api2wire_box_autoadd_psbt(psbt);
    var arg2 = _platform.api2wire_box_autoadd_key_id(keyId);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_psbt_to_unsigned_tx__method__Wallet(arg0, arg1, arg2),
      parseSuccessData: _wire2api_unsigned_tx,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kPsbtToUnsignedTxMethodWalletConstMeta,
      argValues: [that, psbt, keyId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPsbtToUnsignedTxMethodWalletConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "psbt_to_unsigned_tx__method__Wallet",
        argNames: ["that", "psbt", "keyId"],
      );

  Future<void> setAvailablePortsMethodFfiSerial(
      {required FfiSerial that, required List<PortDesc> ports, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ffi_serial(that);
    var arg1 = _platform.api2wire_list_port_desc(ports);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_set_available_ports__method__FfiSerial(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kSetAvailablePortsMethodFfiSerialConstMeta,
      argValues: [that, ports],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSetAvailablePortsMethodFfiSerialConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "set_available_ports__method__FfiSerial",
            argNames: ["that", "ports"],
          );

  Future<void> startThreadMethodCoordinator(
      {required Coordinator that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_coordinator(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_start_thread__method__Coordinator(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kStartThreadMethodCoordinatorConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStartThreadMethodCoordinatorConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "start_thread__method__Coordinator",
        argNames: ["that"],
      );

  Future<void> updateNamePreviewMethodCoordinator(
      {required Coordinator that,
      required DeviceId id,
      required String name,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_coordinator(that);
    var arg1 = _platform.api2wire_box_autoadd_device_id(id);
    var arg2 = _platform.api2wire_String(name);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_update_name_preview__method__Coordinator(
              port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kUpdateNamePreviewMethodCoordinatorConstMeta,
      argValues: [that, id, name],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kUpdateNamePreviewMethodCoordinatorConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "update_name_preview__method__Coordinator",
            argNames: ["that", "id", "name"],
          );

  Future<void> finishNamingMethodCoordinator(
      {required Coordinator that,
      required DeviceId id,
      required String name,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_coordinator(that);
    var arg1 = _platform.api2wire_box_autoadd_device_id(id);
    var arg2 = _platform.api2wire_String(name);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_finish_naming__method__Coordinator(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kFinishNamingMethodCoordinatorConstMeta,
      argValues: [that, id, name],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFinishNamingMethodCoordinatorConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "finish_naming__method__Coordinator",
        argNames: ["that", "id", "name"],
      );

  Future<void> sendCancelMethodCoordinator(
      {required Coordinator that, required DeviceId id, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_coordinator(that);
    var arg1 = _platform.api2wire_box_autoadd_device_id(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_send_cancel__method__Coordinator(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kSendCancelMethodCoordinatorConstMeta,
      argValues: [that, id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSendCancelMethodCoordinatorConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "send_cancel__method__Coordinator",
        argNames: ["that", "id"],
      );

  Future<void> cancelAllMethodCoordinator(
      {required Coordinator that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_coordinator(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_cancel_all__method__Coordinator(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kCancelAllMethodCoordinatorConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCancelAllMethodCoordinatorConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cancel_all__method__Coordinator",
        argNames: ["that"],
      );

  Stream<void> displayBackupMethodCoordinator(
      {required Coordinator that,
      required DeviceId id,
      required KeyId keyId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_coordinator(that);
    var arg1 = _platform.api2wire_box_autoadd_device_id(id);
    var arg2 = _platform.api2wire_box_autoadd_key_id(keyId);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_display_backup__method__Coordinator(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kDisplayBackupMethodCoordinatorConstMeta,
      argValues: [that, id, keyId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDisplayBackupMethodCoordinatorConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "display_backup__method__Coordinator",
        argNames: ["that", "id", "keyId"],
      );

  KeyState keyStateMethodCoordinator(
      {required Coordinator that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_coordinator(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_key_state__method__Coordinator(arg0),
      parseSuccessData: _wire2api_key_state,
      parseErrorData: null,
      constMeta: kKeyStateMethodCoordinatorConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kKeyStateMethodCoordinatorConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "key_state__method__Coordinator",
        argNames: ["that"],
      );

  Stream<KeyState> subKeyEventsMethodCoordinator(
      {required Coordinator that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_coordinator(that);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_sub_key_events__method__Coordinator(port_, arg0),
      parseSuccessData: _wire2api_key_state,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kSubKeyEventsMethodCoordinatorConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSubKeyEventsMethodCoordinatorConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sub_key_events__method__Coordinator",
        argNames: ["that"],
      );

  FrostKey? getKeyMethodCoordinator(
      {required Coordinator that, required KeyId keyId, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_coordinator(that);
    var arg1 = _platform.api2wire_box_autoadd_key_id(keyId);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_get_key__method__Coordinator(arg0, arg1),
      parseSuccessData: _wire2api_opt_box_autoadd_frost_key,
      parseErrorData: null,
      constMeta: kGetKeyMethodCoordinatorConstMeta,
      argValues: [that, keyId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetKeyMethodCoordinatorConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_key__method__Coordinator",
        argNames: ["that", "keyId"],
      );

  List<KeyId> keysForDeviceMethodCoordinator(
      {required Coordinator that, required DeviceId deviceId, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_coordinator(that);
    var arg1 = _platform.api2wire_box_autoadd_device_id(deviceId);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_keys_for_device__method__Coordinator(arg0, arg1),
      parseSuccessData: _wire2api_list_key_id,
      parseErrorData: null,
      constMeta: kKeysForDeviceMethodCoordinatorConstMeta,
      argValues: [that, deviceId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kKeysForDeviceMethodCoordinatorConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "keys_for_device__method__Coordinator",
        argNames: ["that", "deviceId"],
      );

  Stream<SigningState> startSigningMethodCoordinator(
      {required Coordinator that,
      required KeyId keyId,
      required List<DeviceId> devices,
      required String message,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_coordinator(that);
    var arg1 = _platform.api2wire_box_autoadd_key_id(keyId);
    var arg2 = _platform.api2wire_list_device_id(devices);
    var arg3 = _platform.api2wire_String(message);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_start_signing__method__Coordinator(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_signing_state,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kStartSigningMethodCoordinatorConstMeta,
      argValues: [that, keyId, devices, message],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStartSigningMethodCoordinatorConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "start_signing__method__Coordinator",
        argNames: ["that", "keyId", "devices", "message"],
      );

  Stream<SigningState> startSigningTxMethodCoordinator(
      {required Coordinator that,
      required KeyId keyId,
      required UnsignedTx unsignedTx,
      required List<DeviceId> devices,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_coordinator(that);
    var arg1 = _platform.api2wire_box_autoadd_key_id(keyId);
    var arg2 = _platform.api2wire_box_autoadd_unsigned_tx(unsignedTx);
    var arg3 = _platform.api2wire_list_device_id(devices);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_start_signing_tx__method__Coordinator(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_signing_state,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kStartSigningTxMethodCoordinatorConstMeta,
      argValues: [that, keyId, unsignedTx, devices],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kStartSigningTxMethodCoordinatorConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "start_signing_tx__method__Coordinator",
            argNames: ["that", "keyId", "unsignedTx", "devices"],
          );

  int noncesAvailableMethodCoordinator(
      {required Coordinator that, required DeviceId id, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_coordinator(that);
    var arg1 = _platform.api2wire_box_autoadd_device_id(id);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_nonces_available__method__Coordinator(arg0, arg1),
      parseSuccessData: _wire2api_usize,
      parseErrorData: null,
      constMeta: kNoncesAvailableMethodCoordinatorConstMeta,
      argValues: [that, id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNoncesAvailableMethodCoordinatorConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "nonces_available__method__Coordinator",
            argNames: ["that", "id"],
          );

  Stream<KeyGenState> generateNewKeyMethodCoordinator(
      {required Coordinator that,
      required int threshold,
      required List<DeviceId> devices,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_coordinator(that);
    var arg1 = api2wire_usize(threshold);
    var arg2 = _platform.api2wire_list_device_id(devices);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_generate_new_key__method__Coordinator(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_key_gen_state,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kGenerateNewKeyMethodCoordinatorConstMeta,
      argValues: [that, threshold, devices],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGenerateNewKeyMethodCoordinatorConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "generate_new_key__method__Coordinator",
            argNames: ["that", "threshold", "devices"],
          );

  SignTaskDescription? persistedSignSessionDescriptionMethodCoordinator(
      {required Coordinator that, required KeyId keyId, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_coordinator(that);
    var arg1 = _platform.api2wire_box_autoadd_key_id(keyId);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_persisted_sign_session_description__method__Coordinator(
              arg0, arg1),
      parseSuccessData: _wire2api_opt_box_autoadd_sign_task_description,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kPersistedSignSessionDescriptionMethodCoordinatorConstMeta,
      argValues: [that, keyId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kPersistedSignSessionDescriptionMethodCoordinatorConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName:
                "persisted_sign_session_description__method__Coordinator",
            argNames: ["that", "keyId"],
          );

  Stream<SigningState> tryRestoreSigningSessionMethodCoordinator(
      {required Coordinator that, required KeyId keyId, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_coordinator(that);
    var arg1 = _platform.api2wire_box_autoadd_key_id(keyId);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_try_restore_signing_session__method__Coordinator(
              port_, arg0, arg1),
      parseSuccessData: _wire2api_signing_state,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kTryRestoreSigningSessionMethodCoordinatorConstMeta,
      argValues: [that, keyId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kTryRestoreSigningSessionMethodCoordinatorConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "try_restore_signing_session__method__Coordinator",
            argNames: ["that", "keyId"],
          );

  Stream<FirmwareUpgradeConfirmState> startFirmwareUpgradeMethodCoordinator(
      {required Coordinator that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_coordinator(that);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_start_firmware_upgrade__method__Coordinator(port_, arg0),
      parseSuccessData: _wire2api_firmware_upgrade_confirm_state,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kStartFirmwareUpgradeMethodCoordinatorConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kStartFirmwareUpgradeMethodCoordinatorConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "start_firmware_upgrade__method__Coordinator",
            argNames: ["that"],
          );

  String upgradeFirmwareDigestMethodCoordinator(
      {required Coordinator that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_coordinator(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_upgrade_firmware_digest__method__Coordinator(arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kUpgradeFirmwareDigestMethodCoordinatorConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kUpgradeFirmwareDigestMethodCoordinatorConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "upgrade_firmware_digest__method__Coordinator",
            argNames: ["that"],
          );

  Future<void> cancelProtocolMethodCoordinator(
      {required Coordinator that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_coordinator(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_cancel_protocol__method__Coordinator(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kCancelProtocolMethodCoordinatorConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCancelProtocolMethodCoordinatorConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "cancel_protocol__method__Coordinator",
            argNames: ["that"],
          );

  Stream<double> enterFirmwareUpgradeModeMethodCoordinator(
      {required Coordinator that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_coordinator(that);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_enter_firmware_upgrade_mode__method__Coordinator(port_, arg0),
      parseSuccessData: _wire2api_f32,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kEnterFirmwareUpgradeModeMethodCoordinatorConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kEnterFirmwareUpgradeModeMethodCoordinatorConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "enter_firmware_upgrade_mode__method__Coordinator",
            argNames: ["that"],
          );

  String descriptorForKeyMethodBitcoinContext(
      {required BitcoinContext that, required KeyId keyId, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_bitcoin_context(that);
    var arg1 = _platform.api2wire_box_autoadd_key_id(keyId);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_descriptor_for_key__method__BitcoinContext(arg0, arg1),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kDescriptorForKeyMethodBitcoinContextConstMeta,
      argValues: [that, keyId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDescriptorForKeyMethodBitcoinContextConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "descriptor_for_key__method__BitcoinContext",
            argNames: ["that", "keyId"],
          );

  String? validateAmountMethodBitcoinContext(
      {required BitcoinContext that,
      required String address,
      required int value,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_bitcoin_context(that);
    var arg1 = _platform.api2wire_String(address);
    var arg2 = _platform.api2wire_u64(value);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_validate_amount__method__BitcoinContext(arg0, arg1, arg2),
      parseSuccessData: _wire2api_opt_String,
      parseErrorData: null,
      constMeta: kValidateAmountMethodBitcoinContextConstMeta,
      argValues: [that, address, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kValidateAmountMethodBitcoinContextConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "validate_amount__method__BitcoinContext",
            argNames: ["that", "address", "value"],
          );

  String? validateDestinationAddressMethodBitcoinContext(
      {required BitcoinContext that, required String address, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_bitcoin_context(that);
    var arg1 = _platform.api2wire_String(address);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_validate_destination_address__method__BitcoinContext(
              arg0, arg1),
      parseSuccessData: _wire2api_opt_String,
      parseErrorData: null,
      constMeta: kValidateDestinationAddressMethodBitcoinContextConstMeta,
      argValues: [that, address],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kValidateDestinationAddressMethodBitcoinContextConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "validate_destination_address__method__BitcoinContext",
            argNames: ["that", "address"],
          );

  EffectOfTx effectMethodSignedTx(
      {required SignedTx that,
      required KeyId keyId,
      required BitcoinNetwork network,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_signed_tx(that);
    var arg1 = _platform.api2wire_box_autoadd_key_id(keyId);
    var arg2 = _platform.api2wire_BitcoinNetwork(network);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_effect__method__SignedTx(arg0, arg1, arg2),
      parseSuccessData: _wire2api_effect_of_tx,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kEffectMethodSignedTxConstMeta,
      argValues: [that, keyId, network],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEffectMethodSignedTxConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "effect__method__SignedTx",
        argNames: ["that", "keyId", "network"],
      );

  Future<Psbt> attachSignaturesToPsbtMethodUnsignedTx(
      {required UnsignedTx that,
      required List<EncodedSignature> signatures,
      required Psbt psbt,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_unsigned_tx(that);
    var arg1 = _platform.api2wire_list_encoded_signature(signatures);
    var arg2 = _platform.api2wire_box_autoadd_psbt(psbt);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_attach_signatures_to_psbt__method__UnsignedTx(
              port_, arg0, arg1, arg2),
      parseSuccessData: (d) => _wire2api_psbt(d),
      parseErrorData: null,
      constMeta: kAttachSignaturesToPsbtMethodUnsignedTxConstMeta,
      argValues: [that, signatures, psbt],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kAttachSignaturesToPsbtMethodUnsignedTxConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "attach_signatures_to_psbt__method__UnsignedTx",
            argNames: ["that", "signatures", "psbt"],
          );

  Future<SignedTx> completeMethodUnsignedTx(
      {required UnsignedTx that,
      required List<EncodedSignature> signatures,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_unsigned_tx(that);
    var arg1 = _platform.api2wire_list_encoded_signature(signatures);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_complete__method__UnsignedTx(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_signed_tx(d),
      parseErrorData: null,
      constMeta: kCompleteMethodUnsignedTxConstMeta,
      argValues: [that, signatures],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCompleteMethodUnsignedTxConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "complete__method__UnsignedTx",
        argNames: ["that", "signatures"],
      );

  EffectOfTx effectMethodUnsignedTx(
      {required UnsignedTx that,
      required KeyId keyId,
      required BitcoinNetwork network,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_unsigned_tx(that);
    var arg1 = _platform.api2wire_box_autoadd_key_id(keyId);
    var arg2 = _platform.api2wire_BitcoinNetwork(network);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_effect__method__UnsignedTx(arg0, arg1, arg2),
      parseSuccessData: _wire2api_effect_of_tx,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kEffectMethodUnsignedTxConstMeta,
      argValues: [that, keyId, network],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEffectMethodUnsignedTxConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "effect__method__UnsignedTx",
        argNames: ["that", "keyId", "network"],
      );

  Uint8List toBytesMethodPsbt({required Psbt that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_psbt(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_to_bytes__method__Psbt(arg0),
      parseSuccessData: _wire2api_uint_8_list,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kToBytesMethodPsbtConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kToBytesMethodPsbtConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "to_bytes__method__Psbt",
        argNames: ["that"],
      );

  Future<QrDecoderStatus> decodeFromBytesMethodQrReader(
      {required QrReader that, required Uint8List bytes, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_qr_reader(that);
    var arg1 = _platform.api2wire_uint_8_list(bytes);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_decode_from_bytes__method__QrReader(port_, arg0, arg1),
      parseSuccessData: _wire2api_qr_decoder_status,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kDecodeFromBytesMethodQrReaderConstMeta,
      argValues: [that, bytes],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDecodeFromBytesMethodQrReaderConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decode_from_bytes__method__QrReader",
        argNames: ["that", "bytes"],
      );

  DropFnType get dropOpaqueArcMutexVecPortDesc =>
      _platform.inner.drop_opaque_ArcMutexVecPortDesc;
  ShareFnType get shareOpaqueArcMutexVecPortDesc =>
      _platform.inner.share_opaque_ArcMutexVecPortDesc;
  OpaqueTypeFinalizer get ArcMutexVecPortDescFinalizer =>
      _platform.ArcMutexVecPortDescFinalizer;

  DropFnType get dropOpaqueArcRTransaction =>
      _platform.inner.drop_opaque_ArcRTransaction;
  ShareFnType get shareOpaqueArcRTransaction =>
      _platform.inner.share_opaque_ArcRTransaction;
  OpaqueTypeFinalizer get ArcRTransactionFinalizer =>
      _platform.ArcRTransactionFinalizer;

  DropFnType get dropOpaqueBitcoinNetwork =>
      _platform.inner.drop_opaque_BitcoinNetwork;
  ShareFnType get shareOpaqueBitcoinNetwork =>
      _platform.inner.share_opaque_BitcoinNetwork;
  OpaqueTypeFinalizer get BitcoinNetworkFinalizer =>
      _platform.BitcoinNetworkFinalizer;

  DropFnType get dropOpaqueBitcoinPsbt =>
      _platform.inner.drop_opaque_BitcoinPsbt;
  ShareFnType get shareOpaqueBitcoinPsbt =>
      _platform.inner.share_opaque_BitcoinPsbt;
  OpaqueTypeFinalizer get BitcoinPsbtFinalizer =>
      _platform.BitcoinPsbtFinalizer;

  DropFnType get dropOpaqueChainSync => _platform.inner.drop_opaque_ChainSync;
  ShareFnType get shareOpaqueChainSync =>
      _platform.inner.share_opaque_ChainSync;
  OpaqueTypeFinalizer get ChainSyncFinalizer => _platform.ChainSyncFinalizer;

  DropFnType get dropOpaqueFfiCoordinator =>
      _platform.inner.drop_opaque_FfiCoordinator;
  ShareFnType get shareOpaqueFfiCoordinator =>
      _platform.inner.share_opaque_FfiCoordinator;
  OpaqueTypeFinalizer get FfiCoordinatorFinalizer =>
      _platform.FfiCoordinatorFinalizer;

  DropFnType get dropOpaqueFfiQrReader =>
      _platform.inner.drop_opaque_FfiQrReader;
  ShareFnType get shareOpaqueFfiQrReader =>
      _platform.inner.share_opaque_FfiQrReader;
  OpaqueTypeFinalizer get FfiQrReaderFinalizer =>
      _platform.FfiQrReaderFinalizer;

  DropFnType get dropOpaqueFrostsnapCoreBitcoinTransactionTransactionTemplate =>
      _platform
          .inner.drop_opaque_FrostsnapCoreBitcoinTransactionTransactionTemplate;
  ShareFnType
      get shareOpaqueFrostsnapCoreBitcoinTransactionTransactionTemplate =>
          _platform.inner
              .share_opaque_FrostsnapCoreBitcoinTransactionTransactionTemplate;
  OpaqueTypeFinalizer
      get FrostsnapCoreBitcoinTransactionTransactionTemplateFinalizer =>
          _platform.FrostsnapCoreBitcoinTransactionTransactionTemplateFinalizer;

  DropFnType get dropOpaqueFrostsnapCoreCoordinatorFrostKey =>
      _platform.inner.drop_opaque_FrostsnapCoreCoordinatorFrostKey;
  ShareFnType get shareOpaqueFrostsnapCoreCoordinatorFrostKey =>
      _platform.inner.share_opaque_FrostsnapCoreCoordinatorFrostKey;
  OpaqueTypeFinalizer get FrostsnapCoreCoordinatorFrostKeyFinalizer =>
      _platform.FrostsnapCoreCoordinatorFrostKeyFinalizer;

  DropFnType get dropOpaqueMutexBTreeMapKeyIdStreamSinkTxState =>
      _platform.inner.drop_opaque_MutexBTreeMapKeyIdStreamSinkTxState;
  ShareFnType get shareOpaqueMutexBTreeMapKeyIdStreamSinkTxState =>
      _platform.inner.share_opaque_MutexBTreeMapKeyIdStreamSinkTxState;
  OpaqueTypeFinalizer get MutexBTreeMapKeyIdStreamSinkTxStateFinalizer =>
      _platform.MutexBTreeMapKeyIdStreamSinkTxStateFinalizer;

  DropFnType get dropOpaqueMutexFrostsnapWallet =>
      _platform.inner.drop_opaque_MutexFrostsnapWallet;
  ShareFnType get shareOpaqueMutexFrostsnapWallet =>
      _platform.inner.share_opaque_MutexFrostsnapWallet;
  OpaqueTypeFinalizer get MutexFrostsnapWalletFinalizer =>
      _platform.MutexFrostsnapWalletFinalizer;

  DropFnType get dropOpaquePortBytesToReadSender =>
      _platform.inner.drop_opaque_PortBytesToReadSender;
  ShareFnType get shareOpaquePortBytesToReadSender =>
      _platform.inner.share_opaque_PortBytesToReadSender;
  OpaqueTypeFinalizer get PortBytesToReadSenderFinalizer =>
      _platform.PortBytesToReadSenderFinalizer;

  DropFnType get dropOpaquePortOpenSender =>
      _platform.inner.drop_opaque_PortOpenSender;
  ShareFnType get shareOpaquePortOpenSender =>
      _platform.inner.share_opaque_PortOpenSender;
  OpaqueTypeFinalizer get PortOpenSenderFinalizer =>
      _platform.PortOpenSenderFinalizer;

  DropFnType get dropOpaquePortReadSender =>
      _platform.inner.drop_opaque_PortReadSender;
  ShareFnType get shareOpaquePortReadSender =>
      _platform.inner.share_opaque_PortReadSender;
  OpaqueTypeFinalizer get PortReadSenderFinalizer =>
      _platform.PortReadSenderFinalizer;

  DropFnType get dropOpaquePortWriteSender =>
      _platform.inner.drop_opaque_PortWriteSender;
  ShareFnType get shareOpaquePortWriteSender =>
      _platform.inner.share_opaque_PortWriteSender;
  OpaqueTypeFinalizer get PortWriteSenderFinalizer =>
      _platform.PortWriteSenderFinalizer;

  DropFnType get dropOpaqueRTransaction =>
      _platform.inner.drop_opaque_RTransaction;
  ShareFnType get shareOpaqueRTransaction =>
      _platform.inner.share_opaque_RTransaction;
  OpaqueTypeFinalizer get RTransactionFinalizer =>
      _platform.RTransactionFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  ArcMutexVecPortDesc _wire2api_ArcMutexVecPortDesc(dynamic raw) {
    return ArcMutexVecPortDesc.fromRaw(raw[0], raw[1], this);
  }

  ArcRTransaction _wire2api_ArcRTransaction(dynamic raw) {
    return ArcRTransaction.fromRaw(raw[0], raw[1], this);
  }

  BitcoinNetwork _wire2api_BitcoinNetwork(dynamic raw) {
    return BitcoinNetwork.fromRaw(raw[0], raw[1], this);
  }

  BitcoinPsbt _wire2api_BitcoinPsbt(dynamic raw) {
    return BitcoinPsbt.fromRaw(raw[0], raw[1], this);
  }

  ChainSync _wire2api_ChainSync(dynamic raw) {
    return ChainSync.fromRaw(raw[0], raw[1], this);
  }

  FfiCoordinator _wire2api_FfiCoordinator(dynamic raw) {
    return FfiCoordinator.fromRaw(raw[0], raw[1], this);
  }

  FfiQrReader _wire2api_FfiQrReader(dynamic raw) {
    return FfiQrReader.fromRaw(raw[0], raw[1], this);
  }

  FrbAnyhowException _wire2api_FrbAnyhowException(dynamic raw) {
    return FrbAnyhowException(raw as String);
  }

  FrostsnapCoreBitcoinTransactionTransactionTemplate
      _wire2api_FrostsnapCoreBitcoinTransactionTransactionTemplate(
          dynamic raw) {
    return FrostsnapCoreBitcoinTransactionTransactionTemplate.fromRaw(
        raw[0], raw[1], this);
  }

  FrostsnapCoreCoordinatorFrostKey _wire2api_FrostsnapCoreCoordinatorFrostKey(
      dynamic raw) {
    return FrostsnapCoreCoordinatorFrostKey.fromRaw(raw[0], raw[1], this);
  }

  MutexBTreeMapKeyIdStreamSinkTxState
      _wire2api_MutexBTreeMapKeyIdStreamSinkTxState(dynamic raw) {
    return MutexBTreeMapKeyIdStreamSinkTxState.fromRaw(raw[0], raw[1], this);
  }

  MutexFrostsnapWallet _wire2api_MutexFrostsnapWallet(dynamic raw) {
    return MutexFrostsnapWallet.fromRaw(raw[0], raw[1], this);
  }

  PortBytesToReadSender _wire2api_PortBytesToReadSender(dynamic raw) {
    return PortBytesToReadSender.fromRaw(raw[0], raw[1], this);
  }

  PortOpenSender _wire2api_PortOpenSender(dynamic raw) {
    return PortOpenSender.fromRaw(raw[0], raw[1], this);
  }

  PortReadSender _wire2api_PortReadSender(dynamic raw) {
    return PortReadSender.fromRaw(raw[0], raw[1], this);
  }

  PortWriteSender _wire2api_PortWriteSender(dynamic raw) {
    return PortWriteSender.fromRaw(raw[0], raw[1], this);
  }

  RTransaction _wire2api_RTransaction(dynamic raw) {
    return RTransaction.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  (String, int) _wire2api___record__String_u64(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      _wire2api_String(arr[0]),
      _wire2api_u64(arr[1]),
    );
  }

  (Coordinator, FfiSerial, Wallet, BitcoinContext)
      _wire2api___record__coordinator_ffi_serial_wallet_bitcoin_context(
          dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4) {
      throw Exception('Expected 4 elements, got ${arr.length}');
    }
    return (
      _wire2api_coordinator(arr[0]),
      _wire2api_ffi_serial(arr[1]),
      _wire2api_wallet(arr[2]),
      _wire2api_bitcoin_context(arr[3]),
    );
  }

  (Coordinator, Wallet, BitcoinContext)
      _wire2api___record__coordinator_wallet_bitcoin_context(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) {
      throw Exception('Expected 3 elements, got ${arr.length}');
    }
    return (
      _wire2api_coordinator(arr[0]),
      _wire2api_wallet(arr[1]),
      _wire2api_bitcoin_context(arr[2]),
    );
  }

  Address _wire2api_address(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Address(
      index: _wire2api_u32(arr[0]),
      addressString: _wire2api_String(arr[1]),
      used: _wire2api_bool(arr[2]),
    );
  }

  BitcoinContext _wire2api_bitcoin_context(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BitcoinContext(
      bridge: this,
      network: _wire2api_BitcoinNetwork(arr[0]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  ConfirmationTime _wire2api_box_autoadd_confirmation_time(dynamic raw) {
    return _wire2api_confirmation_time(raw);
  }

  DecodingProgress _wire2api_box_autoadd_decoding_progress(dynamic raw) {
    return _wire2api_decoding_progress(raw);
  }

  Device _wire2api_box_autoadd_device(dynamic raw) {
    return _wire2api_device(raw);
  }

  double _wire2api_box_autoadd_f64(dynamic raw) {
    return raw as double;
  }

  FrostKey _wire2api_box_autoadd_frost_key(dynamic raw) {
    return _wire2api_frost_key(raw);
  }

  KeyId _wire2api_box_autoadd_key_id(dynamic raw) {
    return _wire2api_key_id(raw);
  }

  PortBytesToRead _wire2api_box_autoadd_port_bytes_to_read(dynamic raw) {
    return _wire2api_port_bytes_to_read(raw);
  }

  PortOpen _wire2api_box_autoadd_port_open(dynamic raw) {
    return _wire2api_port_open(raw);
  }

  PortRead _wire2api_box_autoadd_port_read(dynamic raw) {
    return _wire2api_port_read(raw);
  }

  PortWrite _wire2api_box_autoadd_port_write(dynamic raw) {
    return _wire2api_port_write(raw);
  }

  SignTaskDescription _wire2api_box_autoadd_sign_task_description(dynamic raw) {
    return _wire2api_sign_task_description(raw);
  }

  UnsignedTx _wire2api_box_autoadd_unsigned_tx(dynamic raw) {
    return _wire2api_unsigned_tx(raw);
  }

  ConfirmationTime _wire2api_confirmation_time(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ConfirmationTime(
      height: _wire2api_u32(arr[0]),
      time: _wire2api_u64(arr[1]),
    );
  }

  Coordinator _wire2api_coordinator(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Coordinator(
      bridge: this,
      field0: _wire2api_FfiCoordinator(arr[0]),
    );
  }

  DecodingProgress _wire2api_decoding_progress(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DecodingProgress(
      decodedFrames: _wire2api_usize(arr[0]),
      sequenceCount: _wire2api_usize(arr[1]),
    );
  }

  Device _wire2api_device(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Device(
      bridge: this,
      name: _wire2api_opt_String(arr[0]),
      firmwareDigest: _wire2api_String(arr[1]),
      latestDigest: _wire2api_String(arr[2]),
      id: _wire2api_device_id(arr[3]),
    );
  }

  DeviceId _wire2api_device_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return DeviceId(
      field0: _wire2api_u8_array_33(arr[0]),
    );
  }

  DeviceListChange _wire2api_device_list_change(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return DeviceListChange(
      kind: _wire2api_device_list_change_kind(arr[0]),
      index: _wire2api_usize(arr[1]),
      device: _wire2api_device(arr[2]),
    );
  }

  DeviceListChangeKind _wire2api_device_list_change_kind(dynamic raw) {
    return DeviceListChangeKind.values[raw as int];
  }

  DeviceListState _wire2api_device_list_state(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DeviceListState(
      bridge: this,
      devices: _wire2api_list_device(arr[0]),
      stateId: _wire2api_usize(arr[1]),
    );
  }

  DeviceListUpdate _wire2api_device_list_update(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DeviceListUpdate(
      changes: _wire2api_list_device_list_change(arr[0]),
      state: _wire2api_device_list_state(arr[1]),
    );
  }

  EffectOfTx _wire2api_effect_of_tx(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return EffectOfTx(
      netValue: _wire2api_i64(arr[0]),
      fee: _wire2api_u64(arr[1]),
      feerate: _wire2api_opt_box_autoadd_f64(arr[2]),
      foreignReceivingAddresses: _wire2api_list___record__String_u64(arr[3]),
    );
  }

  EncodedSignature _wire2api_encoded_signature(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return EncodedSignature(
      field0: _wire2api_u8_array_64(arr[0]),
    );
  }

  double _wire2api_f32(dynamic raw) {
    return raw as double;
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  FfiSerial _wire2api_ffi_serial(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiSerial(
      bridge: this,
      availablePorts: _wire2api_ArcMutexVecPortDesc(arr[0]),
    );
  }

  FirmwareUpgradeConfirmState _wire2api_firmware_upgrade_confirm_state(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return FirmwareUpgradeConfirmState(
      confirmations: _wire2api_list_device_id(arr[0]),
      devices: _wire2api_list_device_id(arr[1]),
      needUpgrade: _wire2api_list_device_id(arr[2]),
      abort: _wire2api_bool(arr[3]),
      upgradeReadyToStart: _wire2api_bool(arr[4]),
    );
  }

  FrostKey _wire2api_frost_key(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FrostKey(
      bridge: this,
      field0: _wire2api_FrostsnapCoreCoordinatorFrostKey(arr[0]),
    );
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  KeyGenState _wire2api_key_gen_state(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return KeyGenState(
      devices: _wire2api_list_device_id(arr[0]),
      gotShares: _wire2api_list_device_id(arr[1]),
      sessionAcks: _wire2api_list_device_id(arr[2]),
      sessionHash: _wire2api_opt_u8_array_32(arr[3]),
      finished: _wire2api_opt_box_autoadd_key_id(arr[4]),
      aborted: _wire2api_opt_String(arr[5]),
      threshold: _wire2api_usize(arr[6]),
    );
  }

  KeyId _wire2api_key_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return KeyId(
      field0: _wire2api_u8_array_33(arr[0]),
    );
  }

  KeyState _wire2api_key_state(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return KeyState(
      keys: _wire2api_list_frost_key(arr[0]),
    );
  }

  List<(String, int)> _wire2api_list___record__String_u64(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api___record__String_u64).toList();
  }

  List<Address> _wire2api_list_address(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_address).toList();
  }

  List<Device> _wire2api_list_device(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_device).toList();
  }

  List<DeviceId> _wire2api_list_device_id(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_device_id).toList();
  }

  List<DeviceListChange> _wire2api_list_device_list_change(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_device_list_change).toList();
  }

  List<EncodedSignature> _wire2api_list_encoded_signature(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_encoded_signature).toList();
  }

  List<FrostKey> _wire2api_list_frost_key(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_frost_key).toList();
  }

  List<KeyId> _wire2api_list_key_id(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_key_id).toList();
  }

  List<Transaction> _wire2api_list_transaction(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_transaction).toList();
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  ConfirmationTime? _wire2api_opt_box_autoadd_confirmation_time(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_confirmation_time(raw);
  }

  Device? _wire2api_opt_box_autoadd_device(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_device(raw);
  }

  double? _wire2api_opt_box_autoadd_f64(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_f64(raw);
  }

  FrostKey? _wire2api_opt_box_autoadd_frost_key(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_frost_key(raw);
  }

  KeyId? _wire2api_opt_box_autoadd_key_id(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_key_id(raw);
  }

  SignTaskDescription? _wire2api_opt_box_autoadd_sign_task_description(
      dynamic raw) {
    return raw == null
        ? null
        : _wire2api_box_autoadd_sign_task_description(raw);
  }

  U8Array32? _wire2api_opt_u8_array_32(dynamic raw) {
    return raw == null ? null : _wire2api_u8_array_32(raw);
  }

  PortBytesToRead _wire2api_port_bytes_to_read(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PortBytesToRead(
      bridge: this,
      id: _wire2api_String(arr[0]),
      ready: _wire2api_PortBytesToReadSender(arr[1]),
    );
  }

  PortEvent _wire2api_port_event(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return PortEvent_Open(
          request: _wire2api_box_autoadd_port_open(raw[1]),
        );
      case 1:
        return PortEvent_Write(
          request: _wire2api_box_autoadd_port_write(raw[1]),
        );
      case 2:
        return PortEvent_Read(
          request: _wire2api_box_autoadd_port_read(raw[1]),
        );
      case 3:
        return PortEvent_BytesToRead(
          request: _wire2api_box_autoadd_port_bytes_to_read(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  PortOpen _wire2api_port_open(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return PortOpen(
      bridge: this,
      id: _wire2api_String(arr[0]),
      baudRate: _wire2api_u32(arr[1]),
      ready: _wire2api_PortOpenSender(arr[2]),
    );
  }

  PortRead _wire2api_port_read(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return PortRead(
      bridge: this,
      id: _wire2api_String(arr[0]),
      len: _wire2api_usize(arr[1]),
      ready: _wire2api_PortReadSender(arr[2]),
    );
  }

  PortWrite _wire2api_port_write(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return PortWrite(
      bridge: this,
      id: _wire2api_String(arr[0]),
      bytes: _wire2api_uint_8_list(arr[1]),
      ready: _wire2api_PortWriteSender(arr[2]),
    );
  }

  Psbt _wire2api_psbt(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Psbt(
      bridge: this,
      inner: _wire2api_BitcoinPsbt(arr[0]),
    );
  }

  QrDecoderStatus _wire2api_qr_decoder_status(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return QrDecoderStatus_Progress(
          _wire2api_box_autoadd_decoding_progress(raw[1]),
        );
      case 1:
        return QrDecoderStatus_Decoded(
          _wire2api_uint_8_list(raw[1]),
        );
      case 2:
        return QrDecoderStatus_Failed(
          _wire2api_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  QrReader _wire2api_qr_reader(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return QrReader(
      bridge: this,
      field0: _wire2api_FfiQrReader(arr[0]),
    );
  }

  SignTaskDescription _wire2api_sign_task_description(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return SignTaskDescription_Plain(
          message: _wire2api_String(raw[1]),
        );
      case 1:
        return SignTaskDescription_Transaction(
          unsignedTx: _wire2api_box_autoadd_unsigned_tx(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  SignedTx _wire2api_signed_tx(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SignedTx(
      bridge: this,
      signedTx: _wire2api_RTransaction(arr[0]),
      unsignedTx: _wire2api_unsigned_tx(arr[1]),
    );
  }

  SigningState _wire2api_signing_state(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return SigningState(
      gotShares: _wire2api_list_device_id(arr[0]),
      neededFrom: _wire2api_list_device_id(arr[1]),
      finishedSignatures: _wire2api_list_encoded_signature(arr[2]),
    );
  }

  Transaction _wire2api_transaction(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Transaction(
      bridge: this,
      netValue: _wire2api_i64(arr[0]),
      inner: _wire2api_ArcRTransaction(arr[1]),
      confirmationTime: _wire2api_opt_box_autoadd_confirmation_time(arr[2]),
    );
  }

  TxState _wire2api_tx_state(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TxState(
      txs: _wire2api_list_transaction(arr[0]),
    );
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  U8Array32 _wire2api_u8_array_32(dynamic raw) {
    return U8Array32(_wire2api_uint_8_list(raw));
  }

  U8Array33 _wire2api_u8_array_33(dynamic raw) {
    return U8Array33(_wire2api_uint_8_list(raw));
  }

  U8Array64 _wire2api_u8_array_64(dynamic raw) {
    return U8Array64(_wire2api_uint_8_list(raw));
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  UnsignedTx _wire2api_unsigned_tx(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UnsignedTx(
      bridge: this,
      templateTx:
          _wire2api_FrostsnapCoreBitcoinTransactionTransactionTemplate(arr[0]),
    );
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }

  Wallet _wire2api_wallet(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Wallet(
      bridge: this,
      inner: _wire2api_MutexFrostsnapWallet(arr[0]),
      walletStreams: _wire2api_MutexBTreeMapKeyIdStreamSinkTxState(arr[1]),
      chainSync: _wire2api_ChainSync(arr[2]),
    );
  }
}

// Section: api2wire

@protected
double api2wire_f64(double raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_log_level(LogLevel raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u16(int raw) {
  return raw;
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}

// Section: finalizer
