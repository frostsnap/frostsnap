name: Frostsnap CI

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-device-firmware:
    name: Build Device Firmware
    runs-on: ubuntu-latest
    env:
      RISCV_VERSION: "2024.09.03-nightly"
    strategy:
      matrix:
        board: ["dev", "frontier"]
    defaults:
      run:
        working-directory: ./device
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@just
      - uses: ./.github/actions/fetch-cargo-deps
      - uses: "./.github/actions/install-cargo-bins"
      - name: Setup | RISCV GCC
        run: just fetch-riscv ${{env.RISCV_VERSION}}
      - name: Add RISC-V GCC to PATH
        run: echo "PATH=$PATH:${GITHUB_WORKSPACE}/riscv/bin" >> $GITHUB_ENV

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: riscv32imc-unknown-none-elf
          components: rustfmt, clippy

      - uses: "./.github/actions/cache-rust-target"
        with:
          key: "build-device-firmware-v0"
          path: "target/riscv32imc-unknown-none-elf/release"

      - run: just lint-device --release --locked
      - run: just build-device ${{ matrix.board }} --locked
      - run: just save-image ${{ matrix.board }}
      - uses: "./.github/actions/upload-artifact"
        with:
          name: frostsnap-${{ matrix.board }}-${{ github.sha }}.bin
          path: target/riscv32imc-unknown-none-elf/release/firmware.bin

  test-ordinary-libs:
    name: Test ordinary libraries
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@just
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - uses: "./.github/actions/fetch-cargo-deps"
        # Restore bridge files just so we can test/lint native
      - uses: "./.github/actions/generate-frb"
      - uses: "./.github/actions/cache-rust-target"
        with:
          key: "test-ordinary-libs-v0"

      - run: just lint-ordinary --release --locked
      - run: just test-ordinary --release --all-features --locked

  app-build-android:
    name: "Build app for Android"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    needs: ["build-device-firmware"]
    steps:
      - uses: actions/checkout@v4
      - uses: "./.github/actions/free-disk-space"
      - uses: "./.github/actions/set-up-app-build"
      - uses: "./.github/actions/cache-rust-target"
        with:
          key: "android-app-v0"
          path: |
            target/aarch64-linux-android/release
            target/armv7-linux-androideabi/release
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi
      - name: Install Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 18
          cache: gradle
      - name: Install android
        uses: android-actions/setup-android@v3
      - name: Install NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c
          link-to-sdk: true
          add-to-path: true
      - name: Build App APK
        run: just frostsnapp/build apk --release
      - name: Build appbundle
        run: just frostsnapp/build appbundle --release
      - name: Upload APK (Android)
        uses: "./.github/actions/upload-artifact"
        with:
          friendly: "Frostsnap.apk"
          description: "Frostsnap for android"
          name: Frostsnap-${{ github.sha }}.apk
          path: frostsnapp/build/app/outputs/apk/release/app-release.apk
      - name: Upload App Bundle (Android)
        uses: "./.github/actions/upload-artifact"
        with:
          name: frostsnapp-${{ github.sha }}.aab
          path: frostsnapp/build/app/outputs/bundle/release/app-release.aab

  app-build-linux:
    needs: ["build-device-firmware"]
    strategy:
      fail-fast: false
    name: "Build app for Linux"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: "./.github/actions/set-up-app-build"
      - uses: "./.github/actions/cache-rust-target"
        with:
          key: "app-build-linux-v0"
      - name: APT install dependencies for linux
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build libstdc++-12-dev libgtk-3-0 libgtk-3-dev cmake clang
      - name: Build App Linux
        run: just frostsnapp/build linux --release

      - uses: "./.github/actions/upload-artifact"
        with:
          name: Frostsnap-${{ github.sha }}-linux-x64
          path: frostsnapp/build/linux/x64/release/bundle
      - name: Check Cargo.lock not dirty
        run: git diff --exit-code Cargo.lock

  app-image:
    name: Package AppImage
    needs: ["app-build-linux"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: Frostsnap-${{ github.sha }}-linux-x64
          path: frostsnapp/build/linux/x64/release/bundle
      - uses: taiki-e/install-action@just
      - run: just frostsnapp/build-appimage

      - name: Upload AppImage
        uses: "./.github/actions/upload-artifact"
        with:
          friendly: Frostsnap.AppImage
          description: "AppImage for x86_64 Linux"
          name: Frostsnap-${{ github.sha }}-x64.AppImage
          path: frostsnapp/Frostsnap-x86_64.AppImage

  app-build-windows:
    name: "Build app for Windows"
    needs: ["build-device-firmware"]
    strategy:
      fail-fast: false
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: "./.github/actions/set-up-app-build"
      - uses: dtolnay/rust-toolchain@stable
      - uses: "./.github/actions/cache-rust-target"
        with:
          key: "app-build-windows-v0"
      - name: Build App Windows
        run: just frostsnapp/build windows --release
      - uses: "./.github/actions/upload-artifact"
        with:
          name: Frostsnap-${{ github.sha }}-windows
          path: frostsnapp/build/windows/x64/runner/Release

  flutter-analyze:
    name: Flutter Analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: "./.github/actions/generate-frb"
      - uses: "./.github/actions/fetch-dart-deps"

      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - uses: taiki-e/install-action@just
      - run: dart format --version
      - run: just lint-app
