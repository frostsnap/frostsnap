use super::{Column, Container, HoldToConfirm, Padding, SizedBox};
use crate::{
    fonts::{
        Gray4TextStyle, NOTO_SANS_17_REGULAR, NOTO_SANS_18_MEDIUM, NOTO_SANS_MONO_24_BOLD,
        NOTO_SANS_MONO_28_BOLD,
    },
    palette::PALETTE,
    MainAxisAlignment, Text,
};
use alloc::{format, string::ToString};
use embedded_graphics::{geometry::Size, pixelcolor::Rgb565};

// Font constants for keygen check
const FONT_CONFIRM_TITLE: &crate::fonts::Gray4Font = &NOTO_SANS_18_MEDIUM;
const FONT_CONFIRM_TEXT: &crate::fonts::Gray4Font = &NOTO_SANS_17_REGULAR;
const FONT_BITCOIN_ADDRESS: &crate::fonts::Gray4Font = &NOTO_SANS_MONO_24_BOLD;
const FONT_BITCOIN_AMOUNT: &crate::fonts::Gray4Font = &NOTO_SANS_MONO_28_BOLD;

type CodeText = Text<Gray4TextStyle<'static>>;
type TofNText = Text<Gray4TextStyle<'static>>;
type CodeColumn = Column<(SizedBox<Rgb565>, TofNText, SizedBox<Rgb565>, CodeText)>;
type PaddedCodeColumn = Padding<CodeColumn>;
type CodeContainer = Container<PaddedCodeColumn>;
type ConfirmText = Text<Gray4TextStyle<'static>>;
type SubtitleColumn = Column<(Text<Gray4TextStyle<'static>>, Text<Gray4TextStyle<'static>>)>;
type PromptColumn = Column<(SubtitleColumn, CodeContainer, ConfirmText)>;

/// Widget for checking and confirming key generation
#[derive(frostsnap_macros::Widget)]
pub struct KeygenCheck {
    /// The hold-to-confirm widget
    #[widget_delegate]
    hold_to_confirm: HoldToConfirm<PromptColumn>,
}

impl KeygenCheck {
    /// Create a new keygen check widget
    pub fn new(t_of_n: (u16, u16), security_check_code: [u8; 4]) -> Self {
        // Format the t of n string
        let t_of_n_text = format!("{} of {}", t_of_n.0, t_of_n.1);

        // Format the security check code as hex
        let hex_code = format!(
            "{:02x}{:02x} {:02x}{:02x}",
            security_check_code[0],
            security_check_code[1],
            security_check_code[2],
            security_check_code[3]
        );

        // Create the t of n text widget in blue
        let t_of_n_widget = Text::new(
            t_of_n_text.to_string(),
            Gray4TextStyle::new(FONT_BITCOIN_ADDRESS, PALETTE.primary),
        );

        // Create the hex code text widget using monospace font in blue
        let code_widget = Text::new(
            hex_code.to_string(),
            Gray4TextStyle::new(FONT_BITCOIN_AMOUNT, PALETTE.primary),
        );

        // Create internal column with t_of_n and code
        // Add spacers for vertical balance
        let spacer_top = SizedBox::new(Size::new(0, 3)); // 3px spacer to balance descender
        let spacer_middle = SizedBox::new(Size::new(0, 3)); // 3px spacer between texts
        let code_column = Column::new((spacer_top, t_of_n_widget, spacer_middle, code_widget))
            .with_cross_axis_alignment(crate::CrossAxisAlignment::Center);

        // Put the column in a container with a border (no fill for cleaner look)
        // Padding::symmetric is (horizontal, vertical) - 10px horizontal, 4px vertical to prevent cutoff
        let padded_code_column = Padding::symmetric(10, 4, code_column);
        let code_container = Container::new(padded_code_column)
            .with_border(PALETTE.outline, 2)
            .with_corner_radius(Size::new(8, 8));

        // Create the subtitle text in smaller grey (now at the top) - split into two lines
        let subtitle_line1 = Text::new(
            "Check this code matches".to_string(),
            Gray4TextStyle::new(FONT_CONFIRM_TEXT, PALETTE.text_secondary),
        );

        let subtitle_line2 = Text::new(
            "on every device".to_string(),
            Gray4TextStyle::new(FONT_CONFIRM_TEXT, PALETTE.text_secondary),
        );

        // Create a column for the subtitle with center alignment
        let subtitle_column = Column::new((subtitle_line1, subtitle_line2))
            .with_cross_axis_alignment(crate::CrossAxisAlignment::Center);

        // Create the main title "Hold to Confirm" (now at the bottom)
        let title_text = Text::new(
            "Hold to Confirm".to_string(),
            Gray4TextStyle::new(FONT_CONFIRM_TITLE, PALETTE.on_background),
        );

        // Create the prompt column with SpaceEvenly alignment and center the items horizontally
        let prompt_column = Column::new((subtitle_column, code_container, title_text))
            .with_main_axis_alignment(MainAxisAlignment::SpaceEvenly)
            .with_cross_axis_alignment(crate::CrossAxisAlignment::Center);

        // Create the hold-to-confirm widget
        let hold_to_confirm = HoldToConfirm::new(
            2000, // 2 second hold duration
            prompt_column,
        );

        Self { hold_to_confirm }
    }

    /// Check if the user has confirmed
    pub fn is_confirmed(&self) -> bool {
        self.hold_to_confirm.is_completed()
    }
}

// All trait implementations are now generated by the derive macro
