use bincode::{Decode, Encode};
use std::fs;

#[derive(Debug, Clone, Copy, Encode, Decode)]
enum ImageColor {
    Binary = 0x00,
}

#[derive(Debug, Encode, Decode)]
struct EncodedImage {
    color: ImageColor,
    width: u32,
    bytes: Vec<u8>,
}

fn main() {
    // Bitcoin symbol bitmap (29x29 pixels)
    // Scaled from tight 10x20 original to fill entire 29x29 space
    // Each row is 4 bytes (29 pixels, padded to 32 bits)
    let bitcoin_symbol_bytes = vec![
        0x03, 0xf1, 0xf8, 0x00, 0x03, 0xf1, 0xf8, 0x00, 0x03, 0xf1, 0xf8, 0x00, 0xff, 0xff, 0xf8,
        0x00, 0xff, 0xff, 0xf8, 0x00, 0xff, 0xff, 0xff, 0xe0, 0xfc, 0x00, 0x07, 0xe0, 0xfc, 0x00,
        0x07, 0xe0, 0xfc, 0x00, 0x07, 0xe0, 0xfc, 0x00, 0x07, 0xe0, 0xfc, 0x00, 0x07, 0xe0, 0xfc,
        0x00, 0x07, 0xe0, 0xfc, 0x00, 0x3f, 0xe0, 0xfc, 0x00, 0x3f, 0xe0, 0xff, 0xff, 0xf8, 0x00,
        0xff, 0xff, 0xff, 0xe0, 0xfc, 0x00, 0x07, 0xe0, 0xfc, 0x00, 0x07, 0xe0, 0xfc, 0x00, 0x00,
        0xf8, 0xfc, 0x00, 0x00, 0xf8, 0xfc, 0x00, 0x00, 0xf8, 0xfc, 0x00, 0x00, 0xf8, 0xfc, 0x00,
        0x07, 0xe0, 0xfc, 0x00, 0x07, 0xe0, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xf8, 0x00, 0xff,
        0xff, 0xf8, 0x00, 0x03, 0xf1, 0xf8, 0x00, 0x03, 0xf1, 0xf8, 0x00,
    ];

    let image = EncodedImage {
        color: ImageColor::Binary,
        width: 29,
        bytes: bitcoin_symbol_bytes,
    };

    // Encode using bincode v2
    let config = bincode::config::standard();
    let encoded = bincode::encode_to_vec(&image, config).expect("Failed to encode image");

    // Write to file
    fs::write("assets/bitcoin-symbol-29x29.bin", &encoded).expect("Failed to write file");

    println!("Bitcoin symbol bitmap created!");
    println!("Size: 29x29 pixels (no padding, fills entire space)");
    println!("Total file size: {} bytes", encoded.len());
    println!("Bitmap data: {} bytes", image.bytes.len());

    // Print hex dump for verification
    println!("\nHex dump of generated file:");
    for (i, chunk) in encoded.chunks(16).enumerate() {
        print!("{:08x}: ", i * 16);
        for byte in chunk {
            print!("{:02x} ", byte);
        }
        println!();
    }
}
